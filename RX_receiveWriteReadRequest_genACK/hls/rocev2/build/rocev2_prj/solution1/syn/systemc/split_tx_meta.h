// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _split_tx_meta_HH_
#define _split_tx_meta_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct split_tx_meta : public sc_module {
    // Port declarations 37
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<128> > tx_ipUdpMetaFifo_V_t_1_dout;
    sc_in< sc_logic > tx_ipUdpMetaFifo_V_t_1_empty_n;
    sc_out< sc_logic > tx_ipUdpMetaFifo_V_t_1_read;
    sc_in< sc_lv<16> > tx_ipUdpMetaFifo_V_t_dout;
    sc_in< sc_logic > tx_ipUdpMetaFifo_V_t_empty_n;
    sc_out< sc_logic > tx_ipUdpMetaFifo_V_t_read;
    sc_in< sc_lv<16> > tx_ipUdpMetaFifo_V_m_dout;
    sc_in< sc_logic > tx_ipUdpMetaFifo_V_m_empty_n;
    sc_out< sc_logic > tx_ipUdpMetaFifo_V_m_read;
    sc_in< sc_lv<16> > tx_ipUdpMetaFifo_V_l_dout;
    sc_in< sc_logic > tx_ipUdpMetaFifo_V_l_empty_n;
    sc_out< sc_logic > tx_ipUdpMetaFifo_V_l_read;
    sc_out< sc_lv<32> > tx_udp2ipMetaFifo_V_s_din;
    sc_in< sc_logic > tx_udp2ipMetaFifo_V_s_full_n;
    sc_out< sc_logic > tx_udp2ipMetaFifo_V_s_write;
    sc_out< sc_lv<16> > tx_udp2ipMetaFifo_V_1_din;
    sc_in< sc_logic > tx_udp2ipMetaFifo_V_1_full_n;
    sc_out< sc_logic > tx_udp2ipMetaFifo_V_1_write;
    sc_out< sc_lv<16> > tx_udpMetaFifo_V_the_din;
    sc_in< sc_logic > tx_udpMetaFifo_V_the_full_n;
    sc_out< sc_logic > tx_udpMetaFifo_V_the_write;
    sc_out< sc_lv<16> > tx_udpMetaFifo_V_my_s_din;
    sc_in< sc_logic > tx_udpMetaFifo_V_my_s_full_n;
    sc_out< sc_logic > tx_udpMetaFifo_V_my_s_write;
    sc_out< sc_lv<16> > tx_udpMetaFifo_V_len_din;
    sc_in< sc_logic > tx_udpMetaFifo_V_len_full_n;
    sc_out< sc_logic > tx_udpMetaFifo_V_len_write;
    sc_out< sc_lv<1> > tx_udpMetaFifo_V_val_din;
    sc_in< sc_logic > tx_udpMetaFifo_V_val_full_n;
    sc_out< sc_logic > tx_udpMetaFifo_V_val_write;


    // Module declarations
    split_tx_meta(sc_module_name name);
    SC_HAS_PROCESS(split_tx_meta);

    ~split_tx_meta();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > io_acc_block_signal_op5;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_56_p6;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op23;
    sc_signal< sc_lv<1> > tmp_reg_141;
    sc_signal< sc_logic > io_acc_block_signal_op24;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > tx_ipUdpMetaFifo_V_t_1_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > tx_ipUdpMetaFifo_V_t_blk_n;
    sc_signal< sc_logic > tx_ipUdpMetaFifo_V_m_blk_n;
    sc_signal< sc_logic > tx_ipUdpMetaFifo_V_l_blk_n;
    sc_signal< sc_logic > tx_udp2ipMetaFifo_V_s_blk_n;
    sc_signal< sc_logic > tx_udp2ipMetaFifo_V_1_blk_n;
    sc_signal< sc_logic > tx_udpMetaFifo_V_the_blk_n;
    sc_signal< sc_logic > tx_udpMetaFifo_V_my_s_blk_n;
    sc_signal< sc_logic > tx_udpMetaFifo_V_len_blk_n;
    sc_signal< sc_logic > tx_udpMetaFifo_V_val_blk_n;
    sc_signal< sc_lv<16> > tmp_their_port_V_reg_145;
    sc_signal< sc_lv<16> > tmp_my_port_V_reg_150;
    sc_signal< sc_lv<16> > tempLen_V_fu_125_p2;
    sc_signal< sc_lv<16> > tempLen_V_reg_155;
    sc_signal< sc_lv<32> > tmp_their_address_V_reg_161;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<16> ap_const_lv16_8;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_7F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_io_acc_block_signal_op23();
    void thread_io_acc_block_signal_op24();
    void thread_io_acc_block_signal_op5();
    void thread_tempLen_V_fu_125_p2();
    void thread_tmp_nbreadreq_fu_56_p6();
    void thread_tx_ipUdpMetaFifo_V_l_blk_n();
    void thread_tx_ipUdpMetaFifo_V_l_read();
    void thread_tx_ipUdpMetaFifo_V_m_blk_n();
    void thread_tx_ipUdpMetaFifo_V_m_read();
    void thread_tx_ipUdpMetaFifo_V_t_1_blk_n();
    void thread_tx_ipUdpMetaFifo_V_t_1_read();
    void thread_tx_ipUdpMetaFifo_V_t_blk_n();
    void thread_tx_ipUdpMetaFifo_V_t_read();
    void thread_tx_udp2ipMetaFifo_V_1_blk_n();
    void thread_tx_udp2ipMetaFifo_V_1_din();
    void thread_tx_udp2ipMetaFifo_V_1_write();
    void thread_tx_udp2ipMetaFifo_V_s_blk_n();
    void thread_tx_udp2ipMetaFifo_V_s_din();
    void thread_tx_udp2ipMetaFifo_V_s_write();
    void thread_tx_udpMetaFifo_V_len_blk_n();
    void thread_tx_udpMetaFifo_V_len_din();
    void thread_tx_udpMetaFifo_V_len_write();
    void thread_tx_udpMetaFifo_V_my_s_blk_n();
    void thread_tx_udpMetaFifo_V_my_s_din();
    void thread_tx_udpMetaFifo_V_my_s_write();
    void thread_tx_udpMetaFifo_V_the_blk_n();
    void thread_tx_udpMetaFifo_V_the_din();
    void thread_tx_udpMetaFifo_V_the_write();
    void thread_tx_udpMetaFifo_V_val_blk_n();
    void thread_tx_udpMetaFifo_V_val_din();
    void thread_tx_udpMetaFifo_V_val_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
