// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _merge_rx_meta_HH_
#define _merge_rx_meta_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct merge_rx_meta : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > rx_ip2udpMetaFifo_V_s_dout;
    sc_in< sc_logic > rx_ip2udpMetaFifo_V_s_empty_n;
    sc_out< sc_logic > rx_ip2udpMetaFifo_V_s_read;
    sc_in< sc_lv<16> > rx_ip2udpMetaFifo_V_1_dout;
    sc_in< sc_logic > rx_ip2udpMetaFifo_V_1_empty_n;
    sc_out< sc_logic > rx_ip2udpMetaFifo_V_1_read;
    sc_in< sc_lv<49> > rx_udpMetaFifo_V_dout;
    sc_in< sc_logic > rx_udpMetaFifo_V_empty_n;
    sc_out< sc_logic > rx_udpMetaFifo_V_read;
    sc_out< sc_lv<128> > rx_ipUdpMetaFifo_V_t_1_din;
    sc_in< sc_logic > rx_ipUdpMetaFifo_V_t_1_full_n;
    sc_out< sc_logic > rx_ipUdpMetaFifo_V_t_1_write;
    sc_out< sc_lv<16> > rx_ipUdpMetaFifo_V_t_din;
    sc_in< sc_logic > rx_ipUdpMetaFifo_V_t_full_n;
    sc_out< sc_logic > rx_ipUdpMetaFifo_V_t_write;
    sc_out< sc_lv<16> > rx_ipUdpMetaFifo_V_m_din;
    sc_in< sc_logic > rx_ipUdpMetaFifo_V_m_full_n;
    sc_out< sc_logic > rx_ipUdpMetaFifo_V_m_write;
    sc_out< sc_lv<16> > rx_ipUdpMetaFifo_V_l_din;
    sc_in< sc_logic > rx_ipUdpMetaFifo_V_l_full_n;
    sc_out< sc_logic > rx_ipUdpMetaFifo_V_l_write;


    // Module declarations
    merge_rx_meta(sc_module_name name);
    SC_HAS_PROCESS(merge_rx_meta);

    ~merge_rx_meta();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > io_acc_block_signal_op7;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_54_p4;
    sc_signal< sc_lv<1> > tmp_64_nbreadreq_fu_64_p3;
    sc_signal< bool > ap_predicate_op7_read_state1;
    sc_signal< bool > ap_predicate_op9_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op24;
    sc_signal< sc_lv<1> > tmp_reg_142;
    sc_signal< sc_lv<1> > tmp_64_reg_146;
    sc_signal< sc_lv<1> > tmp_65_reg_170;
    sc_signal< bool > ap_predicate_op24_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > rx_ip2udpMetaFifo_V_s_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > rx_ip2udpMetaFifo_V_1_blk_n;
    sc_signal< sc_logic > rx_udpMetaFifo_V_blk_n;
    sc_signal< sc_logic > rx_ipUdpMetaFifo_V_t_1_blk_n;
    sc_signal< sc_logic > rx_ipUdpMetaFifo_V_t_blk_n;
    sc_signal< sc_logic > rx_ipUdpMetaFifo_V_m_blk_n;
    sc_signal< sc_logic > rx_ipUdpMetaFifo_V_l_blk_n;
    sc_signal< sc_lv<32> > tmp_their_address_V_reg_150;
    sc_signal< sc_lv<16> > tmp_their_port_V_fu_106_p1;
    sc_signal< sc_lv<16> > tmp_their_port_V_reg_155;
    sc_signal< sc_lv<16> > tmp_my_port_V_reg_160;
    sc_signal< sc_lv<16> > tmp_length_V_reg_165;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_30;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op24_write_state2();
    void thread_ap_predicate_op7_read_state1();
    void thread_ap_predicate_op9_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_io_acc_block_signal_op24();
    void thread_io_acc_block_signal_op7();
    void thread_rx_ip2udpMetaFifo_V_1_blk_n();
    void thread_rx_ip2udpMetaFifo_V_1_read();
    void thread_rx_ip2udpMetaFifo_V_s_blk_n();
    void thread_rx_ip2udpMetaFifo_V_s_read();
    void thread_rx_ipUdpMetaFifo_V_l_blk_n();
    void thread_rx_ipUdpMetaFifo_V_l_din();
    void thread_rx_ipUdpMetaFifo_V_l_write();
    void thread_rx_ipUdpMetaFifo_V_m_blk_n();
    void thread_rx_ipUdpMetaFifo_V_m_din();
    void thread_rx_ipUdpMetaFifo_V_m_write();
    void thread_rx_ipUdpMetaFifo_V_t_1_blk_n();
    void thread_rx_ipUdpMetaFifo_V_t_1_din();
    void thread_rx_ipUdpMetaFifo_V_t_1_write();
    void thread_rx_ipUdpMetaFifo_V_t_blk_n();
    void thread_rx_ipUdpMetaFifo_V_t_din();
    void thread_rx_ipUdpMetaFifo_V_t_write();
    void thread_rx_udpMetaFifo_V_blk_n();
    void thread_rx_udpMetaFifo_V_read();
    void thread_tmp_64_nbreadreq_fu_64_p3();
    void thread_tmp_nbreadreq_fu_54_p4();
    void thread_tmp_their_port_V_fu_106_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
