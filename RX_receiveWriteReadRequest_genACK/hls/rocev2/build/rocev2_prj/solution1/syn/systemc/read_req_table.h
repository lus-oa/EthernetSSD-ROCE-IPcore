// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _read_req_table_HH_
#define _read_req_table_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "read_req_table_req_table_max_fwd_re.h"

namespace ap_rtl {

struct read_req_table : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<40> > tx_readReqTable_upd_s_0_dout;
    sc_in< sc_logic > tx_readReqTable_upd_s_0_empty_n;
    sc_out< sc_logic > tx_readReqTable_upd_s_0_read;
    sc_in< sc_lv<41> > rx_readReqTable_upd_1_dout;
    sc_in< sc_logic > rx_readReqTable_upd_1_empty_n;
    sc_out< sc_logic > rx_readReqTable_upd_1_read;


    // Module declarations
    read_req_table(sc_module_name name);
    SC_HAS_PROCESS(read_req_table);

    ~read_req_table();

    sc_trace_file* mVcdFile;

    read_req_table_req_table_max_fwd_re* req_table_max_fwd_re_U;
    read_req_table_req_table_max_fwd_re* req_table_oldest_out_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_52_p3;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > tmp_reg_162;
    sc_signal< sc_lv<1> > tmp_34_nbreadreq_fu_66_p3;
    sc_signal< bool > ap_predicate_op17_read_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > req_table_max_fwd_re_address1;
    sc_signal< sc_logic > req_table_max_fwd_re_ce1;
    sc_signal< sc_logic > req_table_max_fwd_re_we1;
    sc_signal< sc_lv<24> > req_table_max_fwd_re_d1;
    sc_signal< sc_lv<9> > req_table_oldest_out_address1;
    sc_signal< sc_logic > req_table_oldest_out_ce1;
    sc_signal< sc_logic > req_table_oldest_out_we1;
    sc_signal< sc_lv<24> > req_table_oldest_out_d1;
    sc_signal< sc_logic > tx_readReqTable_upd_s_0_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > rx_readReqTable_upd_1_blk_n;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln544_fu_129_p1;
    sc_signal< sc_lv<64> > zext_ln544_3_fu_157_p1;
    sc_signal< sc_lv<1> > tmp_35_fu_149_p3;
    sc_signal< sc_lv<16> > trunc_ln321_fu_114_p1;
    sc_signal< sc_lv<16> > trunc_ln321_3_fu_134_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_28;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op17_read_state2();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_req_table_max_fwd_re_address1();
    void thread_req_table_max_fwd_re_ce1();
    void thread_req_table_max_fwd_re_d1();
    void thread_req_table_max_fwd_re_we1();
    void thread_req_table_oldest_out_address1();
    void thread_req_table_oldest_out_ce1();
    void thread_req_table_oldest_out_d1();
    void thread_req_table_oldest_out_we1();
    void thread_rx_readReqTable_upd_1_blk_n();
    void thread_rx_readReqTable_upd_1_read();
    void thread_tmp_34_nbreadreq_fu_66_p3();
    void thread_tmp_35_fu_149_p3();
    void thread_tmp_nbreadreq_fu_52_p3();
    void thread_trunc_ln321_3_fu_134_p1();
    void thread_trunc_ln321_fu_114_p1();
    void thread_tx_readReqTable_upd_s_0_blk_n();
    void thread_tx_readReqTable_upd_s_0_read();
    void thread_zext_ln544_3_fu_157_p1();
    void thread_zext_ln544_fu_129_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
