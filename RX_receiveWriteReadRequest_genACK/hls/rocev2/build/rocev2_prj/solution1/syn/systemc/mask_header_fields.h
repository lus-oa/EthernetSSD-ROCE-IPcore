// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mask_header_fields_HH_
#define _mask_header_fields_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mask_header_fields : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<512> > tx_ip2crcFifo_V_data_dout;
    sc_in< sc_logic > tx_ip2crcFifo_V_data_empty_n;
    sc_out< sc_logic > tx_ip2crcFifo_V_data_read;
    sc_in< sc_lv<64> > tx_ip2crcFifo_V_keep_dout;
    sc_in< sc_logic > tx_ip2crcFifo_V_keep_empty_n;
    sc_out< sc_logic > tx_ip2crcFifo_V_keep_read;
    sc_in< sc_lv<1> > tx_ip2crcFifo_V_last_dout;
    sc_in< sc_logic > tx_ip2crcFifo_V_last_empty_n;
    sc_out< sc_logic > tx_ip2crcFifo_V_last_read;
    sc_out< sc_lv<512> > tx_maskedDataFifo_V_1_din;
    sc_in< sc_logic > tx_maskedDataFifo_V_1_full_n;
    sc_out< sc_logic > tx_maskedDataFifo_V_1_write;
    sc_out< sc_lv<64> > tx_maskedDataFifo_V_2_din;
    sc_in< sc_logic > tx_maskedDataFifo_V_2_full_n;
    sc_out< sc_logic > tx_maskedDataFifo_V_2_write;
    sc_out< sc_lv<1> > tx_maskedDataFifo_V_s_din;
    sc_in< sc_logic > tx_maskedDataFifo_V_s_full_n;
    sc_out< sc_logic > tx_maskedDataFifo_V_s_write;
    sc_out< sc_lv<512> > tx_crcDataFifo_V_dat_din;
    sc_in< sc_logic > tx_crcDataFifo_V_dat_full_n;
    sc_out< sc_logic > tx_crcDataFifo_V_dat_write;
    sc_out< sc_lv<64> > tx_crcDataFifo_V_kee_din;
    sc_in< sc_logic > tx_crcDataFifo_V_kee_full_n;
    sc_out< sc_logic > tx_crcDataFifo_V_kee_write;
    sc_out< sc_lv<1> > tx_crcDataFifo_V_las_din;
    sc_in< sc_logic > tx_crcDataFifo_V_las_full_n;
    sc_out< sc_logic > tx_crcDataFifo_V_las_write;


    // Module declarations
    mask_header_fields(sc_module_name name);
    SC_HAS_PROCESS(mask_header_fields);

    ~mask_header_fields();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > io_acc_block_signal_op5;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_54_p5;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op28;
    sc_signal< sc_lv<1> > tmp_reg_174;
    sc_signal< sc_logic > io_acc_block_signal_op29;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > ai_wordCount_V;
    sc_signal< sc_logic > tx_ip2crcFifo_V_data_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > tx_ip2crcFifo_V_keep_blk_n;
    sc_signal< sc_logic > tx_ip2crcFifo_V_last_blk_n;
    sc_signal< sc_logic > tx_maskedDataFifo_V_1_blk_n;
    sc_signal< sc_logic > tx_maskedDataFifo_V_2_blk_n;
    sc_signal< sc_logic > tx_maskedDataFifo_V_s_blk_n;
    sc_signal< sc_logic > tx_crcDataFifo_V_dat_blk_n;
    sc_signal< sc_logic > tx_crcDataFifo_V_kee_blk_n;
    sc_signal< sc_logic > tx_crcDataFifo_V_las_blk_n;
    sc_signal< sc_lv<512> > tmp_data_V_31_reg_178;
    sc_signal< sc_lv<64> > tmp_keep_V_reg_183;
    sc_signal< sc_lv<1> > tmp_last_V_reg_189;
    sc_signal< sc_lv<512> > tmp_data_V_fu_146_p3;
    sc_signal< sc_lv<512> > tmp_data_V_reg_195;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<8> > select_ln313_fu_160_p3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<264> > trunc_ln357_fu_124_p1;
    sc_signal< sc_lv<264> > or_ln1356_fu_128_p2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_118_p2;
    sc_signal< sc_lv<512> > p_Result_s_fu_134_p5;
    sc_signal< sc_lv<8> > add_ln700_fu_154_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<264> ap_const_lv264_lc_14;
    static const sc_lv<32> ap_const_lv32_107;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln700_fu_154_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_icmp_ln879_fu_118_p2();
    void thread_io_acc_block_signal_op28();
    void thread_io_acc_block_signal_op29();
    void thread_io_acc_block_signal_op5();
    void thread_or_ln1356_fu_128_p2();
    void thread_p_Result_s_fu_134_p5();
    void thread_select_ln313_fu_160_p3();
    void thread_tmp_data_V_fu_146_p3();
    void thread_tmp_nbreadreq_fu_54_p5();
    void thread_trunc_ln357_fu_124_p1();
    void thread_tx_crcDataFifo_V_dat_blk_n();
    void thread_tx_crcDataFifo_V_dat_din();
    void thread_tx_crcDataFifo_V_dat_write();
    void thread_tx_crcDataFifo_V_kee_blk_n();
    void thread_tx_crcDataFifo_V_kee_din();
    void thread_tx_crcDataFifo_V_kee_write();
    void thread_tx_crcDataFifo_V_las_blk_n();
    void thread_tx_crcDataFifo_V_las_din();
    void thread_tx_crcDataFifo_V_las_write();
    void thread_tx_ip2crcFifo_V_data_blk_n();
    void thread_tx_ip2crcFifo_V_data_read();
    void thread_tx_ip2crcFifo_V_keep_blk_n();
    void thread_tx_ip2crcFifo_V_keep_read();
    void thread_tx_ip2crcFifo_V_last_blk_n();
    void thread_tx_ip2crcFifo_V_last_read();
    void thread_tx_maskedDataFifo_V_1_blk_n();
    void thread_tx_maskedDataFifo_V_1_din();
    void thread_tx_maskedDataFifo_V_1_write();
    void thread_tx_maskedDataFifo_V_2_blk_n();
    void thread_tx_maskedDataFifo_V_2_din();
    void thread_tx_maskedDataFifo_V_2_write();
    void thread_tx_maskedDataFifo_V_s_blk_n();
    void thread_tx_maskedDataFifo_V_s_din();
    void thread_tx_maskedDataFifo_V_s_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
