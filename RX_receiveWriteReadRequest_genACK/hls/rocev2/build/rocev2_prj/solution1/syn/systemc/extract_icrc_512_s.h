// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _extract_icrc_512_s_HH_
#define _extract_icrc_512_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct extract_icrc_512_s : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > s_axis_rx_data_TVALID;
    sc_out< sc_lv<512> > rx_crc2ipFifo_V_data_din;
    sc_in< sc_logic > rx_crc2ipFifo_V_data_full_n;
    sc_out< sc_logic > rx_crc2ipFifo_V_data_write;
    sc_out< sc_lv<64> > rx_crc2ipFifo_V_keep_din;
    sc_in< sc_logic > rx_crc2ipFifo_V_keep_full_n;
    sc_out< sc_logic > rx_crc2ipFifo_V_keep_write;
    sc_out< sc_lv<1> > rx_crc2ipFifo_V_last_din;
    sc_in< sc_logic > rx_crc2ipFifo_V_last_full_n;
    sc_out< sc_logic > rx_crc2ipFifo_V_last_write;
    sc_in< sc_lv<512> > s_axis_rx_data_TDATA;
    sc_out< sc_logic > s_axis_rx_data_TREADY;
    sc_in< sc_lv<64> > s_axis_rx_data_TKEEP;
    sc_in< sc_lv<1> > s_axis_rx_data_TLAST;


    // Module declarations
    extract_icrc_512_s(sc_module_name name);
    SC_HAS_PROCESS(extract_icrc_512_s);

    ~extract_icrc_512_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<2> > ei_state_load_load_fu_283_p1;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_96_p5;
    sc_signal< bool > ap_predicate_op44_read_state1;
    sc_signal< bool > ap_predicate_op60_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_logic > io_acc_block_signal_op79;
    sc_signal< sc_lv<2> > ei_state_load_reg_449;
    sc_signal< sc_logic > io_acc_block_signal_op81;
    sc_signal< sc_lv<1> > tmp_105_reg_470;
    sc_signal< bool > ap_predicate_op81_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > ei_state;
    sc_signal< sc_lv<512> > ei_prevWord_data_V;
    sc_signal< sc_lv<64> > ei_prevWord_keep_V;
    sc_signal< sc_lv<1> > ei_prevWord_last_V;
    sc_signal< sc_logic > s_axis_rx_data_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > rx_crc2ipFifo_V_data_blk_n;
    sc_signal< sc_logic > rx_crc2ipFifo_V_keep_blk_n;
    sc_signal< sc_logic > rx_crc2ipFifo_V_last_blk_n;
    sc_signal< sc_lv<512> > tmp_data_V_64_reg_453;
    sc_signal< sc_lv<64> > tmp_keep_V_55_load_fu_291_p1;
    sc_signal< sc_lv<64> > tmp_keep_V_55_reg_458;
    sc_signal< sc_lv<1> > tmp_last_V_44_reg_464;
    sc_signal< sc_lv<1> > or_ln91_fu_409_p2;
    sc_signal< sc_lv<1> > grp_fu_265_p1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<1> > ap_phi_mux_ei_prevWord_last_V_f_phi_fu_134_p12;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_ei_prevWord_last_V_f_reg_131;
    sc_signal< sc_lv<1> > ap_phi_mux_ei_prevWord_last_V_n_phi_fu_158_p12;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_ei_prevWord_last_V_n_reg_155;
    sc_signal< sc_lv<64> > ap_phi_reg_pp0_iter0_tmp_keep_V_56_reg_176;
    sc_signal< sc_lv<64> > ap_phi_reg_pp0_iter1_tmp_keep_V_56_reg_176;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_tmp_last_V_43_reg_247;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_tmp_last_V_43_reg_247;
    sc_signal< sc_lv<2> > select_ln91_fu_415_p3;
    sc_signal< sc_lv<2> > select_ln79_fu_429_p3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > tmp_106_fu_395_p3;
    sc_signal< sc_lv<1> > xor_ln1054_fu_403_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_146;
    sc_signal< bool > ap_condition_289;
    sc_signal< bool > ap_condition_95;
    sc_signal< bool > ap_condition_312;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<64> ap_const_lv64_F;
    static const sc_lv<64> ap_const_lv64_FF;
    static const sc_lv<64> ap_const_lv64_FFF;
    static const sc_lv<64> ap_const_lv64_FFFF;
    static const sc_lv<64> ap_const_lv64_FFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFF;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_146();
    void thread_ap_condition_289();
    void thread_ap_condition_312();
    void thread_ap_condition_95();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_ei_prevWord_last_V_f_phi_fu_134_p12();
    void thread_ap_phi_mux_ei_prevWord_last_V_n_phi_fu_158_p12();
    void thread_ap_phi_reg_pp0_iter0_ei_prevWord_last_V_f_reg_131();
    void thread_ap_phi_reg_pp0_iter0_ei_prevWord_last_V_n_reg_155();
    void thread_ap_phi_reg_pp0_iter0_tmp_keep_V_56_reg_176();
    void thread_ap_phi_reg_pp0_iter0_tmp_last_V_43_reg_247();
    void thread_ap_predicate_op44_read_state1();
    void thread_ap_predicate_op60_read_state1();
    void thread_ap_predicate_op81_write_state2();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ei_state_load_load_fu_283_p1();
    void thread_grp_fu_265_p1();
    void thread_grp_nbreadreq_fu_96_p5();
    void thread_io_acc_block_signal_op79();
    void thread_io_acc_block_signal_op81();
    void thread_or_ln91_fu_409_p2();
    void thread_rx_crc2ipFifo_V_data_blk_n();
    void thread_rx_crc2ipFifo_V_data_din();
    void thread_rx_crc2ipFifo_V_data_write();
    void thread_rx_crc2ipFifo_V_keep_blk_n();
    void thread_rx_crc2ipFifo_V_keep_din();
    void thread_rx_crc2ipFifo_V_keep_write();
    void thread_rx_crc2ipFifo_V_last_blk_n();
    void thread_rx_crc2ipFifo_V_last_din();
    void thread_rx_crc2ipFifo_V_last_write();
    void thread_s_axis_rx_data_TDATA_blk_n();
    void thread_s_axis_rx_data_TREADY();
    void thread_select_ln79_fu_429_p3();
    void thread_select_ln91_fu_415_p3();
    void thread_tmp_106_fu_395_p3();
    void thread_tmp_keep_V_55_load_fu_291_p1();
    void thread_xor_ln1054_fu_403_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
