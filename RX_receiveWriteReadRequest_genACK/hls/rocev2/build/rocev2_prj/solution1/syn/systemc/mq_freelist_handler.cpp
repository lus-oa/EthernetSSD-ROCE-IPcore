// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mq_freelist_handler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mq_freelist_handler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mq_freelist_handler::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> mq_freelist_handler::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> mq_freelist_handler::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mq_freelist_handler::ap_const_boolean_1 = true;
const sc_lv<1> mq_freelist_handler::ap_const_lv1_1 = "1";
const sc_lv<1> mq_freelist_handler::ap_const_lv1_0 = "0";
const bool mq_freelist_handler::ap_const_boolean_0 = false;
const sc_lv<16> mq_freelist_handler::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> mq_freelist_handler::ap_const_lv32_B = "1011";
const sc_lv<32> mq_freelist_handler::ap_const_lv32_F = "1111";
const sc_lv<5> mq_freelist_handler::ap_const_lv5_0 = "00000";
const sc_lv<16> mq_freelist_handler::ap_const_lv16_1 = "1";

mq_freelist_handler::mq_freelist_handler(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_fu_94_p2);
    sensitive << ( freeListCounter_V );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( mq_releaseFifo_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_44_p3 );
    sensitive << ( mq_freeListFifo_V_V_full_n );
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_predicate_op16_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( mq_releaseFifo_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_44_p3 );
    sensitive << ( mq_freeListFifo_V_V_full_n );
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_predicate_op16_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( mq_releaseFifo_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_44_p3 );
    sensitive << ( mq_freeListFifo_V_V_full_n );
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_predicate_op16_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( mq_releaseFifo_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_44_p3 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( mq_freeListFifo_V_V_full_n );
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_predicate_op16_write_state2 );

    SC_METHOD(thread_ap_condition_112);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op16_write_state2);
    sensitive << ( tmp_reg_106 );
    sensitive << ( icmp_ln887_fu_88_p2 );
    sensitive << ( tmp_54_nbwritereq_fu_58_p3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_icmp_ln887_fu_88_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_53_fu_78_p4 );

    SC_METHOD(thread_mq_freeListFifo_V_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( mq_freeListFifo_V_V_full_n );
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_predicate_op16_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_mq_freeListFifo_V_V_din);
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_predicate_op16_write_state2 );
    sensitive << ( freeListCounter_V );
    sensitive << ( tmp_V_reg_110 );
    sensitive << ( ap_condition_112 );

    SC_METHOD(thread_mq_freeListFifo_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_106 );
    sensitive << ( ap_predicate_op16_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_mq_releaseFifo_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( mq_releaseFifo_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_44_p3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_mq_releaseFifo_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_44_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_53_fu_78_p4);
    sensitive << ( freeListCounter_V );

    SC_METHOD(thread_tmp_54_nbwritereq_fu_58_p3);
    sensitive << ( mq_freeListFifo_V_V_full_n );

    SC_METHOD(thread_tmp_nbreadreq_fu_44_p3);
    sensitive << ( mq_releaseFifo_V_V_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    freeListCounter_V = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mq_freelist_handler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, mq_releaseFifo_V_V_dout, "(port)mq_releaseFifo_V_V_dout");
    sc_trace(mVcdFile, mq_releaseFifo_V_V_empty_n, "(port)mq_releaseFifo_V_V_empty_n");
    sc_trace(mVcdFile, mq_releaseFifo_V_V_read, "(port)mq_releaseFifo_V_V_read");
    sc_trace(mVcdFile, mq_freeListFifo_V_V_din, "(port)mq_freeListFifo_V_V_din");
    sc_trace(mVcdFile, mq_freeListFifo_V_V_full_n, "(port)mq_freeListFifo_V_V_full_n");
    sc_trace(mVcdFile, mq_freeListFifo_V_V_write, "(port)mq_freeListFifo_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_44_p3, "tmp_nbreadreq_fu_44_p3");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, tmp_reg_106, "tmp_reg_106");
    sc_trace(mVcdFile, icmp_ln887_fu_88_p2, "icmp_ln887_fu_88_p2");
    sc_trace(mVcdFile, tmp_54_nbwritereq_fu_58_p3, "tmp_54_nbwritereq_fu_58_p3");
    sc_trace(mVcdFile, ap_predicate_op16_write_state2, "ap_predicate_op16_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, freeListCounter_V, "freeListCounter_V");
    sc_trace(mVcdFile, mq_releaseFifo_V_V_blk_n, "mq_releaseFifo_V_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, mq_freeListFifo_V_V_blk_n, "mq_freeListFifo_V_V_blk_n");
    sc_trace(mVcdFile, tmp_V_reg_110, "tmp_V_reg_110");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, add_ln700_fu_94_p2, "add_ln700_fu_94_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_53_fu_78_p4, "tmp_53_fu_78_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_112, "ap_condition_112");
#endif

    }
}

mq_freelist_handler::~mq_freelist_handler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mq_freelist_handler::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        freeListCounter_V = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(tmp_reg_106.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_88_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_54_nbwritereq_fu_58_p3.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            freeListCounter_V = add_ln700_fu_94_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_reg_110 = mq_releaseFifo_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_106 = tmp_nbreadreq_fu_44_p3.read();
    }
}

void mq_freelist_handler::thread_add_ln700_fu_94_p2() {
    add_ln700_fu_94_p2 = (!freeListCounter_V.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(freeListCounter_V.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void mq_freelist_handler::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void mq_freelist_handler::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mq_freelist_handler::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mq_releaseFifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_106.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void mq_freelist_handler::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mq_releaseFifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_106.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void mq_freelist_handler::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mq_releaseFifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_106.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void mq_freelist_handler::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, mq_releaseFifo_V_V_empty_n.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void mq_freelist_handler::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, mq_freeListFifo_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_106.read())));
}

void mq_freelist_handler::thread_ap_condition_112() {
    ap_condition_112 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void mq_freelist_handler::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mq_freelist_handler::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void mq_freelist_handler::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void mq_freelist_handler::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mq_freelist_handler::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void mq_freelist_handler::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void mq_freelist_handler::thread_ap_predicate_op16_write_state2() {
    ap_predicate_op16_write_state2 = (esl_seteq<1,1,1>(tmp_reg_106.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_88_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_54_nbwritereq_fu_58_p3.read()));
}

void mq_freelist_handler::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mq_freelist_handler::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void mq_freelist_handler::thread_icmp_ln887_fu_88_p2() {
    icmp_ln887_fu_88_p2 = (!tmp_53_fu_78_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_53_fu_78_p4.read() == ap_const_lv5_0);
}

void mq_freelist_handler::thread_mq_freeListFifo_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_106.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        mq_freeListFifo_V_V_blk_n = mq_freeListFifo_V_V_full_n.read();
    } else {
        mq_freeListFifo_V_V_blk_n = ap_const_logic_1;
    }
}

void mq_freelist_handler::thread_mq_freeListFifo_V_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_112.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_106.read())) {
            mq_freeListFifo_V_V_din = tmp_V_reg_110.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_write_state2.read())) {
            mq_freeListFifo_V_V_din = freeListCounter_V.read();
        } else {
            mq_freeListFifo_V_V_din = "XXXXXXXXXXXXXXXX";
        }
    } else {
        mq_freeListFifo_V_V_din = "XXXXXXXXXXXXXXXX";
    }
}

void mq_freelist_handler::thread_mq_freeListFifo_V_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_106.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        mq_freeListFifo_V_V_write = ap_const_logic_1;
    } else {
        mq_freeListFifo_V_V_write = ap_const_logic_0;
    }
}

void mq_freelist_handler::thread_mq_releaseFifo_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        mq_releaseFifo_V_V_blk_n = mq_releaseFifo_V_V_empty_n.read();
    } else {
        mq_releaseFifo_V_V_blk_n = ap_const_logic_1;
    }
}

void mq_freelist_handler::thread_mq_releaseFifo_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        mq_releaseFifo_V_V_read = ap_const_logic_1;
    } else {
        mq_releaseFifo_V_V_read = ap_const_logic_0;
    }
}

void mq_freelist_handler::thread_tmp_53_fu_78_p4() {
    tmp_53_fu_78_p4 = freeListCounter_V.read().range(15, 11);
}

void mq_freelist_handler::thread_tmp_54_nbwritereq_fu_58_p3() {
    tmp_54_nbwritereq_fu_58_p3 =  (sc_lv<1>) (mq_freeListFifo_V_V_full_n.read());
}

void mq_freelist_handler::thread_tmp_nbreadreq_fu_44_p3() {
    tmp_nbreadreq_fu_44_p3 =  (sc_lv<1>) ((mq_releaseFifo_V_V_empty_n.read()));
}

void mq_freelist_handler::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

