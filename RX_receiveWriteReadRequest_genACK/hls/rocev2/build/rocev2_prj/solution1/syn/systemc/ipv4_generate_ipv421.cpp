// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ipv4_generate_ipv421.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ipv4_generate_ipv421::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ipv4_generate_ipv421::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ipv4_generate_ipv421::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ipv4_generate_ipv421::ap_const_boolean_1 = true;
const sc_lv<2> ipv4_generate_ipv421::ap_const_lv2_2 = "10";
const sc_lv<1> ipv4_generate_ipv421::ap_const_lv1_1 = "1";
const sc_lv<2> ipv4_generate_ipv421::ap_const_lv2_3 = "11";
const sc_lv<2> ipv4_generate_ipv421::ap_const_lv2_0 = "00";
const bool ipv4_generate_ipv421::ap_const_boolean_0 = false;
const sc_lv<16> ipv4_generate_ipv421::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_60 = "1100000";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_7F = "1111111";
const sc_lv<16> ipv4_generate_ipv421::ap_const_lv16_14 = "10100";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_8 = "1000";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_F = "1111";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_10 = "10000";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_1F = "11111";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_80 = "10000000";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_9F = "10011111";
const sc_lv<48> ipv4_generate_ipv421::ap_const_lv48_11FF00400200 = "100011111111100000000010000000000001000000000";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_20 = "100000";
const sc_lv<32> ipv4_generate_ipv421::ap_const_lv32_4F = "1001111";
const sc_lv<9> ipv4_generate_ipv421::ap_const_lv9_0 = "000000000";
const sc_lv<25> ipv4_generate_ipv421::ap_const_lv25_A0 = "10100000";
const sc_lv<25> ipv4_generate_ipv421::ap_const_lv25_9F = "10011111";
const sc_lv<160> ipv4_generate_ipv421::ap_const_lv160_lc_7 = "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<160> ipv4_generate_ipv421::ap_const_lv160_lc_4 = "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<16> ipv4_generate_ipv421::ap_const_lv16_1 = "1";

ipv4_generate_ipv421::ipv4_generate_ipv421(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Lo_assign_fu_347_p3);
    sensitive << ( header_idx_4 );

    SC_METHOD(thread_add_ln87_fu_425_p2);
    sensitive << ( header_idx_4 );

    SC_METHOD(thread_addr_V_read_assign_1_fu_199_p4);
    sensitive << ( local_ip_address_V_dout );

    SC_METHOD(thread_agg_result_V_0_1_i_i_fu_267_p3);
    sensitive << ( trunc_ln647_fu_263_p1 );
    sensitive << ( p_Result_128_i_i_i_fu_253_p4 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( local_ip_address_V_empty_n );
    sensitive << ( io_acc_block_signal_op8 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( io_acc_block_signal_op23 );
    sensitive << ( ap_predicate_op23_read_state1 );
    sensitive << ( io_acc_block_signal_op73 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( io_acc_block_signal_op77 );
    sensitive << ( ap_predicate_op77_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( local_ip_address_V_empty_n );
    sensitive << ( io_acc_block_signal_op8 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( io_acc_block_signal_op23 );
    sensitive << ( ap_predicate_op23_read_state1 );
    sensitive << ( io_acc_block_signal_op73 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( io_acc_block_signal_op77 );
    sensitive << ( ap_predicate_op77_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( local_ip_address_V_empty_n );
    sensitive << ( io_acc_block_signal_op8 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( io_acc_block_signal_op23 );
    sensitive << ( ap_predicate_op23_read_state1 );
    sensitive << ( io_acc_block_signal_op73 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( io_acc_block_signal_op77 );
    sensitive << ( ap_predicate_op77_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( local_ip_address_V_empty_n );
    sensitive << ( io_acc_block_signal_op8 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( io_acc_block_signal_op23 );
    sensitive << ( ap_predicate_op23_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( io_acc_block_signal_op73 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( io_acc_block_signal_op77 );
    sensitive << ( ap_predicate_op77_write_state2 );

    SC_METHOD(thread_ap_condition_140);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_194);
    sensitive << ( grp_nbreadreq_fu_124_p5 );
    sensitive << ( gi_state );
    sensitive << ( grp_fu_185_p1 );

    SC_METHOD(thread_ap_condition_199);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_230);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op16_read_state1);
    sensitive << ( grp_nbreadreq_fu_124_p5 );
    sensitive << ( gi_state );

    SC_METHOD(thread_ap_predicate_op23_read_state1);
    sensitive << ( tmp_nbreadreq_fu_146_p4 );
    sensitive << ( gi_state );

    SC_METHOD(thread_ap_predicate_op73_write_state2);
    sensitive << ( gi_state_load_reg_460 );
    sensitive << ( tmp_71_reg_464 );

    SC_METHOD(thread_ap_predicate_op77_write_state2);
    sensitive << ( gi_state_load_reg_460 );
    sensitive << ( tmp_70_reg_473 );

    SC_METHOD(thread_ap_predicate_op8_read_state1);
    sensitive << ( grp_nbreadreq_fu_124_p5 );
    sensitive << ( gi_state );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_currWord_data_V_1_fu_439_p3);
    sensitive << ( reg_189 );
    sensitive << ( icmp_ln84_fu_355_p2 );
    sensitive << ( p_Result_46_fu_413_p5 );

    SC_METHOD(thread_grp_fu_185_p1);
    sensitive << ( tx_shift2ipv4Fifo_V_s_dout );

    SC_METHOD(thread_grp_nbreadreq_fu_124_p5);
    sensitive << ( tx_shift2ipv4Fifo_V_1_empty_n );
    sensitive << ( tx_shift2ipv4Fifo_V_2_empty_n );
    sensitive << ( tx_shift2ipv4Fifo_V_s_empty_n );

    SC_METHOD(thread_icmp_ln647_fu_361_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gi_state_load_reg_460 );
    sensitive << ( tmp_71_reg_464 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Lo_assign_fu_347_p3 );

    SC_METHOD(thread_icmp_ln84_fu_355_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gi_state_load_reg_460 );
    sensitive << ( tmp_71_reg_464 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( Lo_assign_fu_347_p3 );

    SC_METHOD(thread_io_acc_block_signal_op16);
    sensitive << ( tx_shift2ipv4Fifo_V_1_empty_n );
    sensitive << ( tx_shift2ipv4Fifo_V_2_empty_n );
    sensitive << ( tx_shift2ipv4Fifo_V_s_empty_n );

    SC_METHOD(thread_io_acc_block_signal_op23);
    sensitive << ( tx_udp2ipMetaFifo_V_s_empty_n );
    sensitive << ( tx_udp2ipMetaFifo_V_1_empty_n );

    SC_METHOD(thread_io_acc_block_signal_op73);
    sensitive << ( ip2checksum_V_data_V_full_n );
    sensitive << ( ip2checksum_V_keep_V_full_n );
    sensitive << ( ip2checksum_V_last_V_full_n );

    SC_METHOD(thread_io_acc_block_signal_op77);
    sensitive << ( ip2checksum_V_data_V_full_n );
    sensitive << ( ip2checksum_V_keep_V_full_n );
    sensitive << ( ip2checksum_V_last_V_full_n );

    SC_METHOD(thread_io_acc_block_signal_op8);
    sensitive << ( tx_shift2ipv4Fifo_V_1_empty_n );
    sensitive << ( tx_shift2ipv4Fifo_V_2_empty_n );
    sensitive << ( tx_shift2ipv4Fifo_V_s_empty_n );

    SC_METHOD(thread_ip2checksum_V_data_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ip2checksum_V_data_V_full_n );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ip2checksum_V_data_V_din);
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( reg_189 );
    sensitive << ( currWord_data_V_1_fu_439_p3 );
    sensitive << ( ap_condition_230 );

    SC_METHOD(thread_ip2checksum_V_data_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ip2checksum_V_keep_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ip2checksum_V_keep_V_full_n );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ip2checksum_V_keep_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( reg_194 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ip2checksum_V_keep_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ip2checksum_V_last_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ip2checksum_V_last_V_full_n );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ip2checksum_V_last_V_din);
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( tmp_last_V_31_reg_468 );
    sensitive << ( tmp_last_V_reg_477 );
    sensitive << ( ap_condition_230 );

    SC_METHOD(thread_ip2checksum_V_last_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op73_write_state2 );
    sensitive << ( ap_predicate_op77_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_length_V_1_fu_247_p2);
    sensitive << ( tx_udp2ipMetaFifo_V_1_dout );

    SC_METHOD(thread_local_ip_address_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( local_ip_address_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_local_ip_address_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_128_i_i_i_fu_253_p4);
    sensitive << ( length_V_1_fu_247_p2 );

    SC_METHOD(thread_p_Result_46_fu_413_p5);
    sensitive << ( reg_189 );
    sensitive << ( p_Result_50_fu_407_p2 );

    SC_METHOD(thread_p_Result_47_fu_279_p5);
    sensitive << ( header_header_V_5 );
    sensitive << ( agg_result_V_0_1_i_i_fu_267_p3 );

    SC_METHOD(thread_p_Result_48_fu_291_p5);
    sensitive << ( tx_udp2ipMetaFifo_V_s_dout );
    sensitive << ( p_Result_47_fu_279_p5 );

    SC_METHOD(thread_p_Result_49_fu_303_p5);
    sensitive << ( p_Result_48_fu_291_p5 );
    sensitive << ( addr_V_read_assign_1_fu_199_p4 );

    SC_METHOD(thread_p_Result_50_fu_407_p2);
    sensitive << ( select_ln647_3_fu_391_p3 );
    sensitive << ( select_ln647_4_fu_399_p3 );

    SC_METHOD(thread_p_Result_s_fu_315_p5);
    sensitive << ( p_Result_49_fu_303_p5 );

    SC_METHOD(thread_select_ln312_fu_219_p3);
    sensitive << ( xor_ln312_fu_213_p2 );

    SC_METHOD(thread_select_ln647_3_fu_391_p3);
    sensitive << ( header_header_V_5 );
    sensitive << ( icmp_ln647_fu_361_p2 );
    sensitive << ( zext_ln647_fu_387_p1 );

    SC_METHOD(thread_select_ln647_4_fu_399_p3);
    sensitive << ( icmp_ln647_fu_361_p2 );

    SC_METHOD(thread_select_ln647_fu_379_p3);
    sensitive << ( icmp_ln647_fu_361_p2 );
    sensitive << ( trunc_ln647_12_fu_367_p1 );
    sensitive << ( tmp_72_fu_371_p3 );

    SC_METHOD(thread_select_ln84_fu_431_p3);
    sensitive << ( header_idx_4 );
    sensitive << ( icmp_ln84_fu_355_p2 );
    sensitive << ( add_ln87_fu_425_p2 );

    SC_METHOD(thread_tmp_72_fu_371_p3);
    sensitive << ( header_header_V_5 );

    SC_METHOD(thread_tmp_nbreadreq_fu_146_p4);
    sensitive << ( tx_udp2ipMetaFifo_V_s_empty_n );
    sensitive << ( tx_udp2ipMetaFifo_V_1_empty_n );

    SC_METHOD(thread_trunc_ln647_12_fu_367_p1);
    sensitive << ( header_header_V_5 );

    SC_METHOD(thread_trunc_ln647_fu_263_p1);
    sensitive << ( length_V_1_fu_247_p2 );

    SC_METHOD(thread_tx_shift2ipv4Fifo_V_1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_shift2ipv4Fifo_V_1_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_shift2ipv4Fifo_V_1_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_shift2ipv4Fifo_V_2_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_shift2ipv4Fifo_V_2_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_shift2ipv4Fifo_V_2_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_shift2ipv4Fifo_V_s_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_shift2ipv4Fifo_V_s_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_shift2ipv4Fifo_V_s_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_udp2ipMetaFifo_V_1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_udp2ipMetaFifo_V_1_empty_n );
    sensitive << ( ap_predicate_op23_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_udp2ipMetaFifo_V_1_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op23_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_udp2ipMetaFifo_V_s_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_udp2ipMetaFifo_V_s_empty_n );
    sensitive << ( ap_predicate_op23_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_udp2ipMetaFifo_V_s_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op23_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_xor_ln312_fu_213_p2);
    sensitive << ( tx_shift2ipv4Fifo_V_s_dout );

    SC_METHOD(thread_zext_ln647_fu_387_p1);
    sensitive << ( select_ln647_fu_379_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    gi_state = "00";
    header_idx_4 = "0000000000000000";
    header_header_V_5 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000101";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ipv4_generate_ipv421_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, local_ip_address_V_dout, "(port)local_ip_address_V_dout");
    sc_trace(mVcdFile, local_ip_address_V_empty_n, "(port)local_ip_address_V_empty_n");
    sc_trace(mVcdFile, local_ip_address_V_read, "(port)local_ip_address_V_read");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_1_dout, "(port)tx_shift2ipv4Fifo_V_1_dout");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_1_empty_n, "(port)tx_shift2ipv4Fifo_V_1_empty_n");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_1_read, "(port)tx_shift2ipv4Fifo_V_1_read");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_2_dout, "(port)tx_shift2ipv4Fifo_V_2_dout");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_2_empty_n, "(port)tx_shift2ipv4Fifo_V_2_empty_n");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_2_read, "(port)tx_shift2ipv4Fifo_V_2_read");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_s_dout, "(port)tx_shift2ipv4Fifo_V_s_dout");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_s_empty_n, "(port)tx_shift2ipv4Fifo_V_s_empty_n");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_s_read, "(port)tx_shift2ipv4Fifo_V_s_read");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_s_dout, "(port)tx_udp2ipMetaFifo_V_s_dout");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_s_empty_n, "(port)tx_udp2ipMetaFifo_V_s_empty_n");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_s_read, "(port)tx_udp2ipMetaFifo_V_s_read");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_1_dout, "(port)tx_udp2ipMetaFifo_V_1_dout");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_1_empty_n, "(port)tx_udp2ipMetaFifo_V_1_empty_n");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_1_read, "(port)tx_udp2ipMetaFifo_V_1_read");
    sc_trace(mVcdFile, ip2checksum_V_data_V_din, "(port)ip2checksum_V_data_V_din");
    sc_trace(mVcdFile, ip2checksum_V_data_V_full_n, "(port)ip2checksum_V_data_V_full_n");
    sc_trace(mVcdFile, ip2checksum_V_data_V_write, "(port)ip2checksum_V_data_V_write");
    sc_trace(mVcdFile, ip2checksum_V_keep_V_din, "(port)ip2checksum_V_keep_V_din");
    sc_trace(mVcdFile, ip2checksum_V_keep_V_full_n, "(port)ip2checksum_V_keep_V_full_n");
    sc_trace(mVcdFile, ip2checksum_V_keep_V_write, "(port)ip2checksum_V_keep_V_write");
    sc_trace(mVcdFile, ip2checksum_V_last_V_din, "(port)ip2checksum_V_last_V_din");
    sc_trace(mVcdFile, ip2checksum_V_last_V_full_n, "(port)ip2checksum_V_last_V_full_n");
    sc_trace(mVcdFile, ip2checksum_V_last_V_write, "(port)ip2checksum_V_last_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, io_acc_block_signal_op8, "io_acc_block_signal_op8");
    sc_trace(mVcdFile, grp_nbreadreq_fu_124_p5, "grp_nbreadreq_fu_124_p5");
    sc_trace(mVcdFile, ap_predicate_op8_read_state1, "ap_predicate_op8_read_state1");
    sc_trace(mVcdFile, io_acc_block_signal_op16, "io_acc_block_signal_op16");
    sc_trace(mVcdFile, ap_predicate_op16_read_state1, "ap_predicate_op16_read_state1");
    sc_trace(mVcdFile, io_acc_block_signal_op23, "io_acc_block_signal_op23");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_146_p4, "tmp_nbreadreq_fu_146_p4");
    sc_trace(mVcdFile, ap_predicate_op23_read_state1, "ap_predicate_op23_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, io_acc_block_signal_op73, "io_acc_block_signal_op73");
    sc_trace(mVcdFile, gi_state_load_reg_460, "gi_state_load_reg_460");
    sc_trace(mVcdFile, tmp_71_reg_464, "tmp_71_reg_464");
    sc_trace(mVcdFile, ap_predicate_op73_write_state2, "ap_predicate_op73_write_state2");
    sc_trace(mVcdFile, io_acc_block_signal_op77, "io_acc_block_signal_op77");
    sc_trace(mVcdFile, tmp_70_reg_473, "tmp_70_reg_473");
    sc_trace(mVcdFile, ap_predicate_op77_write_state2, "ap_predicate_op77_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, gi_state, "gi_state");
    sc_trace(mVcdFile, header_idx_4, "header_idx_4");
    sc_trace(mVcdFile, header_header_V_5, "header_header_V_5");
    sc_trace(mVcdFile, local_ip_address_V_blk_n, "local_ip_address_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_s_blk_n, "tx_udp2ipMetaFifo_V_s_blk_n");
    sc_trace(mVcdFile, tx_udp2ipMetaFifo_V_1_blk_n, "tx_udp2ipMetaFifo_V_1_blk_n");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_1_blk_n, "tx_shift2ipv4Fifo_V_1_blk_n");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_2_blk_n, "tx_shift2ipv4Fifo_V_2_blk_n");
    sc_trace(mVcdFile, tx_shift2ipv4Fifo_V_s_blk_n, "tx_shift2ipv4Fifo_V_s_blk_n");
    sc_trace(mVcdFile, ip2checksum_V_data_V_blk_n, "ip2checksum_V_data_V_blk_n");
    sc_trace(mVcdFile, ip2checksum_V_keep_V_blk_n, "ip2checksum_V_keep_V_blk_n");
    sc_trace(mVcdFile, ip2checksum_V_last_V_blk_n, "ip2checksum_V_last_V_blk_n");
    sc_trace(mVcdFile, reg_189, "reg_189");
    sc_trace(mVcdFile, reg_194, "reg_194");
    sc_trace(mVcdFile, grp_fu_185_p1, "grp_fu_185_p1");
    sc_trace(mVcdFile, tmp_last_V_31_reg_468, "tmp_last_V_31_reg_468");
    sc_trace(mVcdFile, tmp_last_V_reg_477, "tmp_last_V_reg_477");
    sc_trace(mVcdFile, tmp_reg_482, "tmp_reg_482");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, select_ln312_fu_219_p3, "select_ln312_fu_219_p3");
    sc_trace(mVcdFile, select_ln84_fu_431_p3, "select_ln84_fu_431_p3");
    sc_trace(mVcdFile, p_Result_s_fu_315_p5, "p_Result_s_fu_315_p5");
    sc_trace(mVcdFile, currWord_data_V_1_fu_439_p3, "currWord_data_V_1_fu_439_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, xor_ln312_fu_213_p2, "xor_ln312_fu_213_p2");
    sc_trace(mVcdFile, length_V_1_fu_247_p2, "length_V_1_fu_247_p2");
    sc_trace(mVcdFile, trunc_ln647_fu_263_p1, "trunc_ln647_fu_263_p1");
    sc_trace(mVcdFile, p_Result_128_i_i_i_fu_253_p4, "p_Result_128_i_i_i_fu_253_p4");
    sc_trace(mVcdFile, agg_result_V_0_1_i_i_fu_267_p3, "agg_result_V_0_1_i_i_fu_267_p3");
    sc_trace(mVcdFile, p_Result_47_fu_279_p5, "p_Result_47_fu_279_p5");
    sc_trace(mVcdFile, p_Result_48_fu_291_p5, "p_Result_48_fu_291_p5");
    sc_trace(mVcdFile, addr_V_read_assign_1_fu_199_p4, "addr_V_read_assign_1_fu_199_p4");
    sc_trace(mVcdFile, p_Result_49_fu_303_p5, "p_Result_49_fu_303_p5");
    sc_trace(mVcdFile, Lo_assign_fu_347_p3, "Lo_assign_fu_347_p3");
    sc_trace(mVcdFile, icmp_ln647_fu_361_p2, "icmp_ln647_fu_361_p2");
    sc_trace(mVcdFile, trunc_ln647_12_fu_367_p1, "trunc_ln647_12_fu_367_p1");
    sc_trace(mVcdFile, tmp_72_fu_371_p3, "tmp_72_fu_371_p3");
    sc_trace(mVcdFile, select_ln647_fu_379_p3, "select_ln647_fu_379_p3");
    sc_trace(mVcdFile, zext_ln647_fu_387_p1, "zext_ln647_fu_387_p1");
    sc_trace(mVcdFile, select_ln647_3_fu_391_p3, "select_ln647_3_fu_391_p3");
    sc_trace(mVcdFile, select_ln647_4_fu_399_p3, "select_ln647_4_fu_399_p3");
    sc_trace(mVcdFile, p_Result_50_fu_407_p2, "p_Result_50_fu_407_p2");
    sc_trace(mVcdFile, icmp_ln84_fu_355_p2, "icmp_ln84_fu_355_p2");
    sc_trace(mVcdFile, add_ln87_fu_425_p2, "add_ln87_fu_425_p2");
    sc_trace(mVcdFile, p_Result_46_fu_413_p5, "p_Result_46_fu_413_p5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_194, "ap_condition_194");
    sc_trace(mVcdFile, ap_condition_140, "ap_condition_140");
    sc_trace(mVcdFile, ap_condition_199, "ap_condition_199");
    sc_trace(mVcdFile, ap_condition_230, "ap_condition_230");
#endif

    }
}

ipv4_generate_ipv421::~ipv4_generate_ipv421() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ipv4_generate_ipv421::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_140.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_146_p4.read()))) {
            gi_state = ap_const_lv2_2;
        } else if (esl_seteq<1,1,1>(ap_condition_194.read(), ap_const_boolean_1)) {
            gi_state = ap_const_lv2_0;
        } else if ((esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_2) && 
                    esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1))) {
            gi_state = select_ln312_fu_219_p3.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_199.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,2,2>(ap_const_lv2_0, gi_state_load_reg_460.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_482.read()))) {
            header_idx_4 = ap_const_lv16_0;
        } else if ((esl_seteq<1,2,2>(ap_const_lv2_2, gi_state_load_reg_460.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_71_reg_464.read()))) {
            header_idx_4 = select_ln84_fu_431_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gi_state_load_reg_460 = gi_state.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_146_p4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        header_header_V_5 = p_Result_s_fu_315_p5.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_2) && 
  esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_3) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_189 = tx_shift2ipv4Fifo_V_1_dout.read();
        reg_194 = tx_shift2ipv4Fifo_V_2_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_3) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_70_reg_473 = grp_nbreadreq_fu_124_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_2) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_71_reg_464 = grp_nbreadreq_fu_124_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_2) && esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_31_reg_468 = tx_shift2ipv4Fifo_V_s_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_3) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_reg_477 = tx_shift2ipv4Fifo_V_s_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_482 = tmp_nbreadreq_fu_146_p4.read();
    }
}

void ipv4_generate_ipv421::thread_Lo_assign_fu_347_p3() {
    Lo_assign_fu_347_p3 = esl_concat<16,9>(header_idx_4.read(), ap_const_lv9_0);
}

void ipv4_generate_ipv421::thread_add_ln87_fu_425_p2() {
    add_ln87_fu_425_p2 = (!header_idx_4.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(header_idx_4.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void ipv4_generate_ipv421::thread_addr_V_read_assign_1_fu_199_p4() {
    addr_V_read_assign_1_fu_199_p4 = local_ip_address_V_dout.read().range(127, 96);
}

void ipv4_generate_ipv421::thread_agg_result_V_0_1_i_i_fu_267_p3() {
    agg_result_V_0_1_i_i_fu_267_p3 = esl_concat<8,8>(trunc_ln647_fu_263_p1.read(), p_Result_128_i_i_i_fu_253_p4.read());
}

void ipv4_generate_ipv421::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void ipv4_generate_ipv421::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ipv4_generate_ipv421::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, local_ip_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op8.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op23.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op73.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op77.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void ipv4_generate_ipv421::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, local_ip_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op8.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op23.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op73.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op77.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void ipv4_generate_ipv421::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, local_ip_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op8.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op23.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op73.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op77.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void ipv4_generate_ipv421::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, local_ip_address_V_empty_n.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op8.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op23.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void ipv4_generate_ipv421::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op73.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op77.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read())));
}

void ipv4_generate_ipv421::thread_ap_condition_140() {
    ap_condition_140 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void ipv4_generate_ipv421::thread_ap_condition_194() {
    ap_condition_194 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_3) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_185_p1.read()));
}

void ipv4_generate_ipv421::thread_ap_condition_199() {
    ap_condition_199 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void ipv4_generate_ipv421::thread_ap_condition_230() {
    ap_condition_230 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void ipv4_generate_ipv421::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void ipv4_generate_ipv421::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void ipv4_generate_ipv421::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void ipv4_generate_ipv421::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_ap_predicate_op16_read_state1() {
    ap_predicate_op16_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_3));
}

void ipv4_generate_ipv421::thread_ap_predicate_op23_read_state1() {
    ap_predicate_op23_read_state1 = (esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_146_p4.read()));
}

void ipv4_generate_ipv421::thread_ap_predicate_op73_write_state2() {
    ap_predicate_op73_write_state2 = (esl_seteq<1,2,2>(ap_const_lv2_2, gi_state_load_reg_460.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_71_reg_464.read()));
}

void ipv4_generate_ipv421::thread_ap_predicate_op77_write_state2() {
    ap_predicate_op77_write_state2 = (esl_seteq<1,2,2>(ap_const_lv2_3, gi_state_load_reg_460.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_70_reg_473.read()));
}

void ipv4_generate_ipv421::thread_ap_predicate_op8_read_state1() {
    ap_predicate_op8_read_state1 = (esl_seteq<1,2,2>(gi_state.read(), ap_const_lv2_2) && esl_seteq<1,1,1>(grp_nbreadreq_fu_124_p5.read(), ap_const_lv1_1));
}

void ipv4_generate_ipv421::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_currWord_data_V_1_fu_439_p3() {
    currWord_data_V_1_fu_439_p3 = (!icmp_ln84_fu_355_p2.read()[0].is_01())? sc_lv<512>(): ((icmp_ln84_fu_355_p2.read()[0].to_bool())? p_Result_46_fu_413_p5.read(): reg_189.read());
}

void ipv4_generate_ipv421::thread_grp_fu_185_p1() {
    grp_fu_185_p1 = tx_shift2ipv4Fifo_V_s_dout.read();
}

void ipv4_generate_ipv421::thread_grp_nbreadreq_fu_124_p5() {
    grp_nbreadreq_fu_124_p5 =  (sc_lv<1>) ((tx_shift2ipv4Fifo_V_1_empty_n.read() & tx_shift2ipv4Fifo_V_2_empty_n.read() & tx_shift2ipv4Fifo_V_s_empty_n.read()));
}

void ipv4_generate_ipv421::thread_icmp_ln647_fu_361_p2() {
    icmp_ln647_fu_361_p2 = (!Lo_assign_fu_347_p3.read().is_01() || !ap_const_lv25_9F.is_01())? sc_lv<1>(): (sc_biguint<25>(Lo_assign_fu_347_p3.read()) > sc_biguint<25>(ap_const_lv25_9F));
}

void ipv4_generate_ipv421::thread_icmp_ln84_fu_355_p2() {
    icmp_ln84_fu_355_p2 = (!Lo_assign_fu_347_p3.read().is_01() || !ap_const_lv25_A0.is_01())? sc_lv<1>(): (sc_biguint<25>(Lo_assign_fu_347_p3.read()) < sc_biguint<25>(ap_const_lv25_A0));
}

void ipv4_generate_ipv421::thread_io_acc_block_signal_op16() {
    io_acc_block_signal_op16 = (tx_shift2ipv4Fifo_V_1_empty_n.read() & tx_shift2ipv4Fifo_V_2_empty_n.read() & tx_shift2ipv4Fifo_V_s_empty_n.read());
}

void ipv4_generate_ipv421::thread_io_acc_block_signal_op23() {
    io_acc_block_signal_op23 = (tx_udp2ipMetaFifo_V_s_empty_n.read() & tx_udp2ipMetaFifo_V_1_empty_n.read());
}

void ipv4_generate_ipv421::thread_io_acc_block_signal_op73() {
    io_acc_block_signal_op73 = (ip2checksum_V_data_V_full_n.read() & ip2checksum_V_keep_V_full_n.read() & ip2checksum_V_last_V_full_n.read());
}

void ipv4_generate_ipv421::thread_io_acc_block_signal_op77() {
    io_acc_block_signal_op77 = (ip2checksum_V_data_V_full_n.read() & ip2checksum_V_keep_V_full_n.read() & ip2checksum_V_last_V_full_n.read());
}

void ipv4_generate_ipv421::thread_io_acc_block_signal_op8() {
    io_acc_block_signal_op8 = (tx_shift2ipv4Fifo_V_1_empty_n.read() & tx_shift2ipv4Fifo_V_2_empty_n.read() & tx_shift2ipv4Fifo_V_s_empty_n.read());
}

void ipv4_generate_ipv421::thread_ip2checksum_V_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        ip2checksum_V_data_V_blk_n = ip2checksum_V_data_V_full_n.read();
    } else {
        ip2checksum_V_data_V_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_ip2checksum_V_data_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_230.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read())) {
            ip2checksum_V_data_V_din = reg_189.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read())) {
            ip2checksum_V_data_V_din = currWord_data_V_1_fu_439_p3.read();
        } else {
            ip2checksum_V_data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ip2checksum_V_data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void ipv4_generate_ipv421::thread_ip2checksum_V_data_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        ip2checksum_V_data_V_write = ap_const_logic_1;
    } else {
        ip2checksum_V_data_V_write = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_ip2checksum_V_keep_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        ip2checksum_V_keep_V_blk_n = ip2checksum_V_keep_V_full_n.read();
    } else {
        ip2checksum_V_keep_V_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_ip2checksum_V_keep_V_din() {
    ip2checksum_V_keep_V_din = reg_194.read();
}

void ipv4_generate_ipv421::thread_ip2checksum_V_keep_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        ip2checksum_V_keep_V_write = ap_const_logic_1;
    } else {
        ip2checksum_V_keep_V_write = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_ip2checksum_V_last_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        ip2checksum_V_last_V_blk_n = ip2checksum_V_last_V_full_n.read();
    } else {
        ip2checksum_V_last_V_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_ip2checksum_V_last_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_230.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read())) {
            ip2checksum_V_last_V_din = tmp_last_V_reg_477.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read())) {
            ip2checksum_V_last_V_din = tmp_last_V_31_reg_468.read();
        } else {
            ip2checksum_V_last_V_din =  (sc_lv<1>) ("X");
        }
    } else {
        ip2checksum_V_last_V_din =  (sc_lv<1>) ("X");
    }
}

void ipv4_generate_ipv421::thread_ip2checksum_V_last_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op73_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op77_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        ip2checksum_V_last_V_write = ap_const_logic_1;
    } else {
        ip2checksum_V_last_V_write = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_length_V_1_fu_247_p2() {
    length_V_1_fu_247_p2 = (!ap_const_lv16_14.is_01() || !tx_udp2ipMetaFifo_V_1_dout.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_14) + sc_biguint<16>(tx_udp2ipMetaFifo_V_1_dout.read()));
}

void ipv4_generate_ipv421::thread_local_ip_address_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        local_ip_address_V_blk_n = local_ip_address_V_empty_n.read();
    } else {
        local_ip_address_V_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_local_ip_address_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        local_ip_address_V_read = ap_const_logic_1;
    } else {
        local_ip_address_V_read = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_p_Result_128_i_i_i_fu_253_p4() {
    p_Result_128_i_i_i_fu_253_p4 = length_V_1_fu_247_p2.read().range(15, 8);
}

void ipv4_generate_ipv421::thread_p_Result_46_fu_413_p5() {
    p_Result_46_fu_413_p5 = esl_partset<512,512,160,32,32>(reg_189.read(), p_Result_50_fu_407_p2.read(), ap_const_lv32_0, ap_const_lv32_9F);
}

void ipv4_generate_ipv421::thread_p_Result_47_fu_279_p5() {
    p_Result_47_fu_279_p5 = esl_partset<160,160,16,32,32>(header_header_V_5.read(), agg_result_V_0_1_i_i_fu_267_p3.read(), ap_const_lv32_10, ap_const_lv32_1F);
}

void ipv4_generate_ipv421::thread_p_Result_48_fu_291_p5() {
    p_Result_48_fu_291_p5 = esl_partset<160,160,32,32,32>(p_Result_47_fu_279_p5.read(), tx_udp2ipMetaFifo_V_s_dout.read(), ap_const_lv32_80, ap_const_lv32_9F);
}

void ipv4_generate_ipv421::thread_p_Result_49_fu_303_p5() {
    p_Result_49_fu_303_p5 = esl_partset<160,160,32,32,32>(p_Result_48_fu_291_p5.read(), addr_V_read_assign_1_fu_199_p4.read(), ap_const_lv32_60, ap_const_lv32_7F);
}

void ipv4_generate_ipv421::thread_p_Result_50_fu_407_p2() {
    p_Result_50_fu_407_p2 = (select_ln647_3_fu_391_p3.read() & select_ln647_4_fu_399_p3.read());
}

void ipv4_generate_ipv421::thread_p_Result_s_fu_315_p5() {
    p_Result_s_fu_315_p5 = esl_partset<160,160,48,32,32>(p_Result_49_fu_303_p5.read(), ap_const_lv48_11FF00400200, ap_const_lv32_20, ap_const_lv32_4F);
}

void ipv4_generate_ipv421::thread_select_ln312_fu_219_p3() {
    select_ln312_fu_219_p3 = (!xor_ln312_fu_213_p2.read()[0].is_01())? sc_lv<2>(): ((xor_ln312_fu_213_p2.read()[0].to_bool())? ap_const_lv2_3: ap_const_lv2_0);
}

void ipv4_generate_ipv421::thread_select_ln647_3_fu_391_p3() {
    select_ln647_3_fu_391_p3 = (!icmp_ln647_fu_361_p2.read()[0].is_01())? sc_lv<160>(): ((icmp_ln647_fu_361_p2.read()[0].to_bool())? zext_ln647_fu_387_p1.read(): header_header_V_5.read());
}

void ipv4_generate_ipv421::thread_select_ln647_4_fu_399_p3() {
    select_ln647_4_fu_399_p3 = (!icmp_ln647_fu_361_p2.read()[0].is_01())? sc_lv<160>(): ((icmp_ln647_fu_361_p2.read()[0].to_bool())? ap_const_lv160_lc_7: ap_const_lv160_lc_4);
}

void ipv4_generate_ipv421::thread_select_ln647_fu_379_p3() {
    select_ln647_fu_379_p3 = (!icmp_ln647_fu_361_p2.read()[0].is_01())? sc_lv<1>(): ((icmp_ln647_fu_361_p2.read()[0].to_bool())? trunc_ln647_12_fu_367_p1.read(): tmp_72_fu_371_p3.read());
}

void ipv4_generate_ipv421::thread_select_ln84_fu_431_p3() {
    select_ln84_fu_431_p3 = (!icmp_ln84_fu_355_p2.read()[0].is_01())? sc_lv<16>(): ((icmp_ln84_fu_355_p2.read()[0].to_bool())? add_ln87_fu_425_p2.read(): header_idx_4.read());
}

void ipv4_generate_ipv421::thread_tmp_72_fu_371_p3() {
    tmp_72_fu_371_p3 = header_header_V_5.read().range(159, 159);
}

void ipv4_generate_ipv421::thread_tmp_nbreadreq_fu_146_p4() {
    tmp_nbreadreq_fu_146_p4 =  (sc_lv<1>) ((tx_udp2ipMetaFifo_V_s_empty_n.read() & tx_udp2ipMetaFifo_V_1_empty_n.read()));
}

void ipv4_generate_ipv421::thread_trunc_ln647_12_fu_367_p1() {
    trunc_ln647_12_fu_367_p1 = header_header_V_5.read().range(1-1, 0);
}

void ipv4_generate_ipv421::thread_trunc_ln647_fu_263_p1() {
    trunc_ln647_fu_263_p1 = length_V_1_fu_247_p2.read().range(8-1, 0);
}

void ipv4_generate_ipv421::thread_tx_shift2ipv4Fifo_V_1_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        tx_shift2ipv4Fifo_V_1_blk_n = tx_shift2ipv4Fifo_V_1_empty_n.read();
    } else {
        tx_shift2ipv4Fifo_V_1_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_tx_shift2ipv4Fifo_V_1_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        tx_shift2ipv4Fifo_V_1_read = ap_const_logic_1;
    } else {
        tx_shift2ipv4Fifo_V_1_read = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_tx_shift2ipv4Fifo_V_2_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        tx_shift2ipv4Fifo_V_2_blk_n = tx_shift2ipv4Fifo_V_2_empty_n.read();
    } else {
        tx_shift2ipv4Fifo_V_2_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_tx_shift2ipv4Fifo_V_2_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        tx_shift2ipv4Fifo_V_2_read = ap_const_logic_1;
    } else {
        tx_shift2ipv4Fifo_V_2_read = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_tx_shift2ipv4Fifo_V_s_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        tx_shift2ipv4Fifo_V_s_blk_n = tx_shift2ipv4Fifo_V_s_empty_n.read();
    } else {
        tx_shift2ipv4Fifo_V_s_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_tx_shift2ipv4Fifo_V_s_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        tx_shift2ipv4Fifo_V_s_read = ap_const_logic_1;
    } else {
        tx_shift2ipv4Fifo_V_s_read = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_tx_udp2ipMetaFifo_V_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_udp2ipMetaFifo_V_1_blk_n = tx_udp2ipMetaFifo_V_1_empty_n.read();
    } else {
        tx_udp2ipMetaFifo_V_1_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_tx_udp2ipMetaFifo_V_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_udp2ipMetaFifo_V_1_read = ap_const_logic_1;
    } else {
        tx_udp2ipMetaFifo_V_1_read = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_tx_udp2ipMetaFifo_V_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_udp2ipMetaFifo_V_s_blk_n = tx_udp2ipMetaFifo_V_s_empty_n.read();
    } else {
        tx_udp2ipMetaFifo_V_s_blk_n = ap_const_logic_1;
    }
}

void ipv4_generate_ipv421::thread_tx_udp2ipMetaFifo_V_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op23_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_udp2ipMetaFifo_V_s_read = ap_const_logic_1;
    } else {
        tx_udp2ipMetaFifo_V_s_read = ap_const_logic_0;
    }
}

void ipv4_generate_ipv421::thread_xor_ln312_fu_213_p2() {
    xor_ln312_fu_213_p2 = (tx_shift2ipv4Fifo_V_s_dout.read() ^ ap_const_lv1_1);
}

void ipv4_generate_ipv421::thread_zext_ln647_fu_387_p1() {
    zext_ln647_fu_387_p1 = esl_zext<160,1>(select_ln647_fu_379_p3.read());
}

void ipv4_generate_ipv421::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

