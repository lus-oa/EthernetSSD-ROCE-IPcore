// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mask_header_fields.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mask_header_fields::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mask_header_fields::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> mask_header_fields::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> mask_header_fields::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mask_header_fields::ap_const_boolean_1 = true;
const sc_lv<1> mask_header_fields::ap_const_lv1_1 = "1";
const bool mask_header_fields::ap_const_boolean_0 = false;
const sc_lv<8> mask_header_fields::ap_const_lv8_0 = "00000000";
const sc_lv<264> mask_header_fields::ap_const_lv264_lc_14 = "111111110000000000000000000000000000000011111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111100000000111111110000000000000000000000000000000000000000000000001111111100000000";
const sc_lv<32> mask_header_fields::ap_const_lv32_107 = "100000111";
const sc_lv<8> mask_header_fields::ap_const_lv8_1 = "1";

mask_header_fields::mask_header_fields(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_fu_154_p2);
    sensitive << ( ai_wordCount_V );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( io_acc_block_signal_op5 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( io_acc_block_signal_op29 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( io_acc_block_signal_op5 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( io_acc_block_signal_op29 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( io_acc_block_signal_op5 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( io_acc_block_signal_op29 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( io_acc_block_signal_op5 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( io_acc_block_signal_op28 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( io_acc_block_signal_op29 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_icmp_ln879_fu_118_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ai_wordCount_V );

    SC_METHOD(thread_io_acc_block_signal_op28);
    sensitive << ( tx_maskedDataFifo_V_1_full_n );
    sensitive << ( tx_maskedDataFifo_V_2_full_n );
    sensitive << ( tx_maskedDataFifo_V_s_full_n );

    SC_METHOD(thread_io_acc_block_signal_op29);
    sensitive << ( tx_crcDataFifo_V_dat_full_n );
    sensitive << ( tx_crcDataFifo_V_kee_full_n );
    sensitive << ( tx_crcDataFifo_V_las_full_n );

    SC_METHOD(thread_io_acc_block_signal_op5);
    sensitive << ( tx_ip2crcFifo_V_data_empty_n );
    sensitive << ( tx_ip2crcFifo_V_keep_empty_n );
    sensitive << ( tx_ip2crcFifo_V_last_empty_n );

    SC_METHOD(thread_or_ln1356_fu_128_p2);
    sensitive << ( trunc_ln357_fu_124_p1 );

    SC_METHOD(thread_p_Result_s_fu_134_p5);
    sensitive << ( tx_ip2crcFifo_V_data_dout );
    sensitive << ( or_ln1356_fu_128_p2 );

    SC_METHOD(thread_select_ln313_fu_160_p3);
    sensitive << ( tx_ip2crcFifo_V_last_dout );
    sensitive << ( add_ln700_fu_154_p2 );

    SC_METHOD(thread_tmp_data_V_fu_146_p3);
    sensitive << ( tx_ip2crcFifo_V_data_dout );
    sensitive << ( icmp_ln879_fu_118_p2 );
    sensitive << ( p_Result_s_fu_134_p5 );

    SC_METHOD(thread_tmp_nbreadreq_fu_54_p5);
    sensitive << ( tx_ip2crcFifo_V_data_empty_n );
    sensitive << ( tx_ip2crcFifo_V_keep_empty_n );
    sensitive << ( tx_ip2crcFifo_V_last_empty_n );

    SC_METHOD(thread_trunc_ln357_fu_124_p1);
    sensitive << ( tx_ip2crcFifo_V_data_dout );

    SC_METHOD(thread_tx_crcDataFifo_V_dat_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tx_crcDataFifo_V_dat_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_crcDataFifo_V_dat_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tmp_data_V_31_reg_178 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tx_crcDataFifo_V_dat_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_crcDataFifo_V_kee_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tx_crcDataFifo_V_kee_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_crcDataFifo_V_kee_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tmp_keep_V_reg_183 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tx_crcDataFifo_V_kee_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_crcDataFifo_V_las_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tx_crcDataFifo_V_las_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_crcDataFifo_V_las_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tmp_last_V_reg_189 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tx_crcDataFifo_V_las_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_ip2crcFifo_V_data_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_ip2crcFifo_V_data_empty_n );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_ip2crcFifo_V_data_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_ip2crcFifo_V_keep_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_ip2crcFifo_V_keep_empty_n );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_ip2crcFifo_V_keep_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_ip2crcFifo_V_last_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tx_ip2crcFifo_V_last_empty_n );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_ip2crcFifo_V_last_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_54_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_maskedDataFifo_V_1_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tx_maskedDataFifo_V_1_full_n );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_maskedDataFifo_V_1_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tmp_data_V_reg_195 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tx_maskedDataFifo_V_1_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_maskedDataFifo_V_2_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tx_maskedDataFifo_V_2_full_n );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_maskedDataFifo_V_2_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tmp_keep_V_reg_183 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tx_maskedDataFifo_V_2_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tx_maskedDataFifo_V_s_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tx_maskedDataFifo_V_s_full_n );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tx_maskedDataFifo_V_s_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( tmp_last_V_reg_189 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tx_maskedDataFifo_V_s_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_174 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ai_wordCount_V = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mask_header_fields_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_data_dout, "(port)tx_ip2crcFifo_V_data_dout");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_data_empty_n, "(port)tx_ip2crcFifo_V_data_empty_n");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_data_read, "(port)tx_ip2crcFifo_V_data_read");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_keep_dout, "(port)tx_ip2crcFifo_V_keep_dout");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_keep_empty_n, "(port)tx_ip2crcFifo_V_keep_empty_n");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_keep_read, "(port)tx_ip2crcFifo_V_keep_read");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_last_dout, "(port)tx_ip2crcFifo_V_last_dout");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_last_empty_n, "(port)tx_ip2crcFifo_V_last_empty_n");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_last_read, "(port)tx_ip2crcFifo_V_last_read");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_1_din, "(port)tx_maskedDataFifo_V_1_din");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_1_full_n, "(port)tx_maskedDataFifo_V_1_full_n");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_1_write, "(port)tx_maskedDataFifo_V_1_write");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_2_din, "(port)tx_maskedDataFifo_V_2_din");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_2_full_n, "(port)tx_maskedDataFifo_V_2_full_n");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_2_write, "(port)tx_maskedDataFifo_V_2_write");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_s_din, "(port)tx_maskedDataFifo_V_s_din");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_s_full_n, "(port)tx_maskedDataFifo_V_s_full_n");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_s_write, "(port)tx_maskedDataFifo_V_s_write");
    sc_trace(mVcdFile, tx_crcDataFifo_V_dat_din, "(port)tx_crcDataFifo_V_dat_din");
    sc_trace(mVcdFile, tx_crcDataFifo_V_dat_full_n, "(port)tx_crcDataFifo_V_dat_full_n");
    sc_trace(mVcdFile, tx_crcDataFifo_V_dat_write, "(port)tx_crcDataFifo_V_dat_write");
    sc_trace(mVcdFile, tx_crcDataFifo_V_kee_din, "(port)tx_crcDataFifo_V_kee_din");
    sc_trace(mVcdFile, tx_crcDataFifo_V_kee_full_n, "(port)tx_crcDataFifo_V_kee_full_n");
    sc_trace(mVcdFile, tx_crcDataFifo_V_kee_write, "(port)tx_crcDataFifo_V_kee_write");
    sc_trace(mVcdFile, tx_crcDataFifo_V_las_din, "(port)tx_crcDataFifo_V_las_din");
    sc_trace(mVcdFile, tx_crcDataFifo_V_las_full_n, "(port)tx_crcDataFifo_V_las_full_n");
    sc_trace(mVcdFile, tx_crcDataFifo_V_las_write, "(port)tx_crcDataFifo_V_las_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, io_acc_block_signal_op5, "io_acc_block_signal_op5");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_54_p5, "tmp_nbreadreq_fu_54_p5");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, io_acc_block_signal_op28, "io_acc_block_signal_op28");
    sc_trace(mVcdFile, tmp_reg_174, "tmp_reg_174");
    sc_trace(mVcdFile, io_acc_block_signal_op29, "io_acc_block_signal_op29");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ai_wordCount_V, "ai_wordCount_V");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_data_blk_n, "tx_ip2crcFifo_V_data_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_keep_blk_n, "tx_ip2crcFifo_V_keep_blk_n");
    sc_trace(mVcdFile, tx_ip2crcFifo_V_last_blk_n, "tx_ip2crcFifo_V_last_blk_n");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_1_blk_n, "tx_maskedDataFifo_V_1_blk_n");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_2_blk_n, "tx_maskedDataFifo_V_2_blk_n");
    sc_trace(mVcdFile, tx_maskedDataFifo_V_s_blk_n, "tx_maskedDataFifo_V_s_blk_n");
    sc_trace(mVcdFile, tx_crcDataFifo_V_dat_blk_n, "tx_crcDataFifo_V_dat_blk_n");
    sc_trace(mVcdFile, tx_crcDataFifo_V_kee_blk_n, "tx_crcDataFifo_V_kee_blk_n");
    sc_trace(mVcdFile, tx_crcDataFifo_V_las_blk_n, "tx_crcDataFifo_V_las_blk_n");
    sc_trace(mVcdFile, tmp_data_V_31_reg_178, "tmp_data_V_31_reg_178");
    sc_trace(mVcdFile, tmp_keep_V_reg_183, "tmp_keep_V_reg_183");
    sc_trace(mVcdFile, tmp_last_V_reg_189, "tmp_last_V_reg_189");
    sc_trace(mVcdFile, tmp_data_V_fu_146_p3, "tmp_data_V_fu_146_p3");
    sc_trace(mVcdFile, tmp_data_V_reg_195, "tmp_data_V_reg_195");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, select_ln313_fu_160_p3, "select_ln313_fu_160_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, trunc_ln357_fu_124_p1, "trunc_ln357_fu_124_p1");
    sc_trace(mVcdFile, or_ln1356_fu_128_p2, "or_ln1356_fu_128_p2");
    sc_trace(mVcdFile, icmp_ln879_fu_118_p2, "icmp_ln879_fu_118_p2");
    sc_trace(mVcdFile, p_Result_s_fu_134_p5, "p_Result_s_fu_134_p5");
    sc_trace(mVcdFile, add_ln700_fu_154_p2, "add_ln700_fu_154_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

mask_header_fields::~mask_header_fields() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mask_header_fields::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ai_wordCount_V = select_ln313_fu_160_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_31_reg_178 = tx_ip2crcFifo_V_data_dout.read();
        tmp_data_V_reg_195 = tmp_data_V_fu_146_p3.read();
        tmp_keep_V_reg_183 = tx_ip2crcFifo_V_keep_dout.read();
        tmp_last_V_reg_189 = tx_ip2crcFifo_V_last_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_174 = tmp_nbreadreq_fu_54_p5.read();
    }
}

void mask_header_fields::thread_add_ln700_fu_154_p2() {
    add_ln700_fu_154_p2 = (!ap_const_lv8_1.is_01() || !ai_wordCount_V.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_1) + sc_biguint<8>(ai_wordCount_V.read()));
}

void mask_header_fields::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void mask_header_fields::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mask_header_fields::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op5.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op29.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void mask_header_fields::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op5.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op29.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void mask_header_fields::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op5.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
    esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op29.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void mask_header_fields::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op5.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void mask_header_fields::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op28.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op29.read())));
}

void mask_header_fields::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mask_header_fields::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void mask_header_fields::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void mask_header_fields::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mask_header_fields::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void mask_header_fields::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void mask_header_fields::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mask_header_fields::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void mask_header_fields::thread_icmp_ln879_fu_118_p2() {
    icmp_ln879_fu_118_p2 = (!ai_wordCount_V.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(ai_wordCount_V.read() == ap_const_lv8_0);
}

void mask_header_fields::thread_io_acc_block_signal_op28() {
    io_acc_block_signal_op28 = (tx_maskedDataFifo_V_1_full_n.read() & tx_maskedDataFifo_V_2_full_n.read() & tx_maskedDataFifo_V_s_full_n.read());
}

void mask_header_fields::thread_io_acc_block_signal_op29() {
    io_acc_block_signal_op29 = (tx_crcDataFifo_V_dat_full_n.read() & tx_crcDataFifo_V_kee_full_n.read() & tx_crcDataFifo_V_las_full_n.read());
}

void mask_header_fields::thread_io_acc_block_signal_op5() {
    io_acc_block_signal_op5 = (tx_ip2crcFifo_V_data_empty_n.read() & tx_ip2crcFifo_V_keep_empty_n.read() & tx_ip2crcFifo_V_last_empty_n.read());
}

void mask_header_fields::thread_or_ln1356_fu_128_p2() {
    or_ln1356_fu_128_p2 = (trunc_ln357_fu_124_p1.read() | ap_const_lv264_lc_14);
}

void mask_header_fields::thread_p_Result_s_fu_134_p5() {
    p_Result_s_fu_134_p5 = esl_partset<512,512,264,32,32>(tx_ip2crcFifo_V_data_dout.read(), or_ln1356_fu_128_p2.read(), ap_const_lv32_0, ap_const_lv32_107);
}

void mask_header_fields::thread_select_ln313_fu_160_p3() {
    select_ln313_fu_160_p3 = (!tx_ip2crcFifo_V_last_dout.read()[0].is_01())? sc_lv<8>(): ((tx_ip2crcFifo_V_last_dout.read()[0].to_bool())? ap_const_lv8_0: add_ln700_fu_154_p2.read());
}

void mask_header_fields::thread_tmp_data_V_fu_146_p3() {
    tmp_data_V_fu_146_p3 = (!icmp_ln879_fu_118_p2.read()[0].is_01())? sc_lv<512>(): ((icmp_ln879_fu_118_p2.read()[0].to_bool())? p_Result_s_fu_134_p5.read(): tx_ip2crcFifo_V_data_dout.read());
}

void mask_header_fields::thread_tmp_nbreadreq_fu_54_p5() {
    tmp_nbreadreq_fu_54_p5 =  (sc_lv<1>) ((tx_ip2crcFifo_V_data_empty_n.read() & tx_ip2crcFifo_V_keep_empty_n.read() & tx_ip2crcFifo_V_last_empty_n.read()));
}

void mask_header_fields::thread_trunc_ln357_fu_124_p1() {
    trunc_ln357_fu_124_p1 = tx_ip2crcFifo_V_data_dout.read().range(264-1, 0);
}

void mask_header_fields::thread_tx_crcDataFifo_V_dat_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_crcDataFifo_V_dat_blk_n = tx_crcDataFifo_V_dat_full_n.read();
    } else {
        tx_crcDataFifo_V_dat_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_crcDataFifo_V_dat_din() {
    tx_crcDataFifo_V_dat_din = tmp_data_V_31_reg_178.read();
}

void mask_header_fields::thread_tx_crcDataFifo_V_dat_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_crcDataFifo_V_dat_write = ap_const_logic_1;
    } else {
        tx_crcDataFifo_V_dat_write = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_crcDataFifo_V_kee_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_crcDataFifo_V_kee_blk_n = tx_crcDataFifo_V_kee_full_n.read();
    } else {
        tx_crcDataFifo_V_kee_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_crcDataFifo_V_kee_din() {
    tx_crcDataFifo_V_kee_din = tmp_keep_V_reg_183.read();
}

void mask_header_fields::thread_tx_crcDataFifo_V_kee_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_crcDataFifo_V_kee_write = ap_const_logic_1;
    } else {
        tx_crcDataFifo_V_kee_write = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_crcDataFifo_V_las_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_crcDataFifo_V_las_blk_n = tx_crcDataFifo_V_las_full_n.read();
    } else {
        tx_crcDataFifo_V_las_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_crcDataFifo_V_las_din() {
    tx_crcDataFifo_V_las_din = tmp_last_V_reg_189.read();
}

void mask_header_fields::thread_tx_crcDataFifo_V_las_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_crcDataFifo_V_las_write = ap_const_logic_1;
    } else {
        tx_crcDataFifo_V_las_write = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_ip2crcFifo_V_data_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_ip2crcFifo_V_data_blk_n = tx_ip2crcFifo_V_data_empty_n.read();
    } else {
        tx_ip2crcFifo_V_data_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_ip2crcFifo_V_data_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_ip2crcFifo_V_data_read = ap_const_logic_1;
    } else {
        tx_ip2crcFifo_V_data_read = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_ip2crcFifo_V_keep_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_ip2crcFifo_V_keep_blk_n = tx_ip2crcFifo_V_keep_empty_n.read();
    } else {
        tx_ip2crcFifo_V_keep_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_ip2crcFifo_V_keep_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_ip2crcFifo_V_keep_read = ap_const_logic_1;
    } else {
        tx_ip2crcFifo_V_keep_read = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_ip2crcFifo_V_last_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_ip2crcFifo_V_last_blk_n = tx_ip2crcFifo_V_last_empty_n.read();
    } else {
        tx_ip2crcFifo_V_last_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_ip2crcFifo_V_last_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_54_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_ip2crcFifo_V_last_read = ap_const_logic_1;
    } else {
        tx_ip2crcFifo_V_last_read = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_maskedDataFifo_V_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_maskedDataFifo_V_1_blk_n = tx_maskedDataFifo_V_1_full_n.read();
    } else {
        tx_maskedDataFifo_V_1_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_maskedDataFifo_V_1_din() {
    tx_maskedDataFifo_V_1_din = tmp_data_V_reg_195.read();
}

void mask_header_fields::thread_tx_maskedDataFifo_V_1_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_maskedDataFifo_V_1_write = ap_const_logic_1;
    } else {
        tx_maskedDataFifo_V_1_write = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_maskedDataFifo_V_2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_maskedDataFifo_V_2_blk_n = tx_maskedDataFifo_V_2_full_n.read();
    } else {
        tx_maskedDataFifo_V_2_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_maskedDataFifo_V_2_din() {
    tx_maskedDataFifo_V_2_din = tmp_keep_V_reg_183.read();
}

void mask_header_fields::thread_tx_maskedDataFifo_V_2_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_maskedDataFifo_V_2_write = ap_const_logic_1;
    } else {
        tx_maskedDataFifo_V_2_write = ap_const_logic_0;
    }
}

void mask_header_fields::thread_tx_maskedDataFifo_V_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        tx_maskedDataFifo_V_s_blk_n = tx_maskedDataFifo_V_s_full_n.read();
    } else {
        tx_maskedDataFifo_V_s_blk_n = ap_const_logic_1;
    }
}

void mask_header_fields::thread_tx_maskedDataFifo_V_s_din() {
    tx_maskedDataFifo_V_s_din = tmp_last_V_reg_189.read();
}

void mask_header_fields::thread_tx_maskedDataFifo_V_s_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_174.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tx_maskedDataFifo_V_s_write = ap_const_logic_1;
    } else {
        tx_maskedDataFifo_V_s_write = ap_const_logic_0;
    }
}

void mask_header_fields::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

