// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module merge_rx_pkgs_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rx_exhNoShiftFifo_V_1_dout,
        rx_exhNoShiftFifo_V_1_empty_n,
        rx_exhNoShiftFifo_V_1_read,
        rx_exhNoShiftFifo_V_4_dout,
        rx_exhNoShiftFifo_V_4_empty_n,
        rx_exhNoShiftFifo_V_4_read,
        rx_exhNoShiftFifo_V_s_dout,
        rx_exhNoShiftFifo_V_s_empty_n,
        rx_exhNoShiftFifo_V_s_read,
        rx_exhNoShiftFifo_V_3_dout,
        rx_exhNoShiftFifo_V_3_empty_n,
        rx_exhNoShiftFifo_V_3_read,
        rx_rethSift2mergerFi_8_dout,
        rx_rethSift2mergerFi_8_empty_n,
        rx_rethSift2mergerFi_8_read,
        rx_rethSift2mergerFi_6_dout,
        rx_rethSift2mergerFi_6_empty_n,
        rx_rethSift2mergerFi_6_read,
        rx_rethSift2mergerFi_7_dout,
        rx_rethSift2mergerFi_7_empty_n,
        rx_rethSift2mergerFi_7_read,
        rx_rethSift2mergerFi_4_dout,
        rx_rethSift2mergerFi_4_empty_n,
        rx_rethSift2mergerFi_4_read,
        rx_aethSift2mergerFi_3_dout,
        rx_aethSift2mergerFi_3_empty_n,
        rx_aethSift2mergerFi_3_read,
        rx_aethSift2mergerFi_5_dout,
        rx_aethSift2mergerFi_5_empty_n,
        rx_aethSift2mergerFi_5_read,
        rx_aethSift2mergerFi_6_dout,
        rx_aethSift2mergerFi_6_empty_n,
        rx_aethSift2mergerFi_6_read,
        rx_pkgShiftTypeFifo_s_8_dout,
        rx_pkgShiftTypeFifo_s_8_empty_n,
        rx_pkgShiftTypeFifo_s_8_read,
        m_axis_mem_write_data_TREADY,
        m_axis_mem_write_data_TDATA,
        m_axis_mem_write_data_TVALID,
        m_axis_mem_write_data_TKEEP,
        m_axis_mem_write_data_TLAST,
        m_axis_mem_write_data_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] rx_exhNoShiftFifo_V_1_dout;
input   rx_exhNoShiftFifo_V_1_empty_n;
output   rx_exhNoShiftFifo_V_1_read;
input  [63:0] rx_exhNoShiftFifo_V_4_dout;
input   rx_exhNoShiftFifo_V_4_empty_n;
output   rx_exhNoShiftFifo_V_4_read;
input  [0:0] rx_exhNoShiftFifo_V_s_dout;
input   rx_exhNoShiftFifo_V_s_empty_n;
output   rx_exhNoShiftFifo_V_s_read;
input  [0:0] rx_exhNoShiftFifo_V_3_dout;
input   rx_exhNoShiftFifo_V_3_empty_n;
output   rx_exhNoShiftFifo_V_3_read;
input  [511:0] rx_rethSift2mergerFi_8_dout;
input   rx_rethSift2mergerFi_8_empty_n;
output   rx_rethSift2mergerFi_8_read;
input  [63:0] rx_rethSift2mergerFi_6_dout;
input   rx_rethSift2mergerFi_6_empty_n;
output   rx_rethSift2mergerFi_6_read;
input  [0:0] rx_rethSift2mergerFi_7_dout;
input   rx_rethSift2mergerFi_7_empty_n;
output   rx_rethSift2mergerFi_7_read;
input  [0:0] rx_rethSift2mergerFi_4_dout;
input   rx_rethSift2mergerFi_4_empty_n;
output   rx_rethSift2mergerFi_4_read;
input  [511:0] rx_aethSift2mergerFi_3_dout;
input   rx_aethSift2mergerFi_3_empty_n;
output   rx_aethSift2mergerFi_3_read;
input  [63:0] rx_aethSift2mergerFi_5_dout;
input   rx_aethSift2mergerFi_5_empty_n;
output   rx_aethSift2mergerFi_5_read;
input  [0:0] rx_aethSift2mergerFi_6_dout;
input   rx_aethSift2mergerFi_6_empty_n;
output   rx_aethSift2mergerFi_6_read;
input  [1:0] rx_pkgShiftTypeFifo_s_8_dout;
input   rx_pkgShiftTypeFifo_s_8_empty_n;
output   rx_pkgShiftTypeFifo_s_8_read;
input   m_axis_mem_write_data_TREADY;
output  [511:0] m_axis_mem_write_data_TDATA;
output   m_axis_mem_write_data_TVALID;
output  [63:0] m_axis_mem_write_data_TKEEP;
output  [0:0] m_axis_mem_write_data_TLAST;
output  [0:0] m_axis_mem_write_data_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rx_exhNoShiftFifo_V_1_read;
reg rx_exhNoShiftFifo_V_4_read;
reg rx_exhNoShiftFifo_V_s_read;
reg rx_exhNoShiftFifo_V_3_read;
reg rx_rethSift2mergerFi_8_read;
reg rx_rethSift2mergerFi_6_read;
reg rx_rethSift2mergerFi_7_read;
reg rx_rethSift2mergerFi_4_read;
reg rx_aethSift2mergerFi_3_read;
reg rx_aethSift2mergerFi_5_read;
reg rx_aethSift2mergerFi_6_read;
reg rx_pkgShiftTypeFifo_s_8_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op8;
wire   [0:0] tmp_61_nbreadreq_fu_82_p6;
reg    ap_predicate_op8_read_state1;
wire    io_acc_block_signal_op16;
wire   [0:0] tmp_60_nbreadreq_fu_108_p6;
reg    ap_predicate_op16_read_state1;
wire    io_acc_block_signal_op24;
wire   [0:0] tmp_59_nbreadreq_fu_134_p5;
reg    ap_predicate_op24_read_state1;
wire   [0:0] tmp_nbreadreq_fu_156_p3;
reg    ap_predicate_op31_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    m_axis_mem_write_data_V_data_V_1_ack_in;
reg   [1:0] state_3_load_reg_281;
reg   [0:0] tmp_61_reg_285;
reg    ap_predicate_op38_write_state2;
reg   [0:0] tmp_60_reg_309;
reg    ap_predicate_op40_write_state2;
reg   [0:0] tmp_59_reg_333;
reg    ap_predicate_op42_write_state2;
reg    ap_block_state2_io;
wire    m_axis_mem_write_data_V_data_V_1_ack_out;
reg   [1:0] m_axis_mem_write_data_V_data_V_1_state;
wire    m_axis_mem_write_data_V_keep_V_1_ack_out;
reg   [1:0] m_axis_mem_write_data_V_keep_V_1_state;
wire    m_axis_mem_write_data_V_last_V_1_ack_out;
reg   [1:0] m_axis_mem_write_data_V_last_V_1_state;
wire    m_axis_mem_write_data_V_dest_V_1_ack_out;
reg   [1:0] m_axis_mem_write_data_V_dest_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] state_3_load_reg_281_pp0_iter1_reg;
reg   [0:0] tmp_61_reg_285_pp0_iter1_reg;
reg    ap_predicate_op58_write_state3;
reg   [0:0] tmp_60_reg_309_pp0_iter1_reg;
reg    ap_predicate_op62_write_state3;
reg   [0:0] tmp_59_reg_333_pp0_iter1_reg;
reg    ap_predicate_op66_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [511:0] m_axis_mem_write_data_V_data_V_1_data_in;
reg   [511:0] m_axis_mem_write_data_V_data_V_1_data_out;
reg    m_axis_mem_write_data_V_data_V_1_vld_in;
wire    m_axis_mem_write_data_V_data_V_1_vld_out;
reg   [511:0] m_axis_mem_write_data_V_data_V_1_payload_A;
reg   [511:0] m_axis_mem_write_data_V_data_V_1_payload_B;
reg    m_axis_mem_write_data_V_data_V_1_sel_rd;
reg    m_axis_mem_write_data_V_data_V_1_sel_wr;
wire    m_axis_mem_write_data_V_data_V_1_sel;
wire    m_axis_mem_write_data_V_data_V_1_load_A;
wire    m_axis_mem_write_data_V_data_V_1_load_B;
wire    m_axis_mem_write_data_V_data_V_1_state_cmp_full;
reg   [63:0] m_axis_mem_write_data_V_keep_V_1_data_in;
reg   [63:0] m_axis_mem_write_data_V_keep_V_1_data_out;
reg    m_axis_mem_write_data_V_keep_V_1_vld_in;
wire    m_axis_mem_write_data_V_keep_V_1_vld_out;
wire    m_axis_mem_write_data_V_keep_V_1_ack_in;
reg   [63:0] m_axis_mem_write_data_V_keep_V_1_payload_A;
reg   [63:0] m_axis_mem_write_data_V_keep_V_1_payload_B;
reg    m_axis_mem_write_data_V_keep_V_1_sel_rd;
reg    m_axis_mem_write_data_V_keep_V_1_sel_wr;
wire    m_axis_mem_write_data_V_keep_V_1_sel;
wire    m_axis_mem_write_data_V_keep_V_1_load_A;
wire    m_axis_mem_write_data_V_keep_V_1_load_B;
wire    m_axis_mem_write_data_V_keep_V_1_state_cmp_full;
reg   [0:0] m_axis_mem_write_data_V_last_V_1_data_in;
reg   [0:0] m_axis_mem_write_data_V_last_V_1_data_out;
reg    m_axis_mem_write_data_V_last_V_1_vld_in;
wire    m_axis_mem_write_data_V_last_V_1_vld_out;
wire    m_axis_mem_write_data_V_last_V_1_ack_in;
reg   [0:0] m_axis_mem_write_data_V_last_V_1_payload_A;
reg   [0:0] m_axis_mem_write_data_V_last_V_1_payload_B;
reg    m_axis_mem_write_data_V_last_V_1_sel_rd;
reg    m_axis_mem_write_data_V_last_V_1_sel_wr;
wire    m_axis_mem_write_data_V_last_V_1_sel;
wire    m_axis_mem_write_data_V_last_V_1_load_A;
wire    m_axis_mem_write_data_V_last_V_1_load_B;
wire    m_axis_mem_write_data_V_last_V_1_state_cmp_full;
reg   [0:0] m_axis_mem_write_data_V_dest_V_1_data_in;
reg   [0:0] m_axis_mem_write_data_V_dest_V_1_data_out;
reg    m_axis_mem_write_data_V_dest_V_1_vld_in;
wire    m_axis_mem_write_data_V_dest_V_1_vld_out;
wire    m_axis_mem_write_data_V_dest_V_1_ack_in;
reg   [0:0] m_axis_mem_write_data_V_dest_V_1_payload_A;
reg   [0:0] m_axis_mem_write_data_V_dest_V_1_payload_B;
reg    m_axis_mem_write_data_V_dest_V_1_sel_rd;
reg    m_axis_mem_write_data_V_dest_V_1_sel_wr;
wire    m_axis_mem_write_data_V_dest_V_1_sel;
wire    m_axis_mem_write_data_V_dest_V_1_load_A;
wire    m_axis_mem_write_data_V_dest_V_1_load_B;
wire    m_axis_mem_write_data_V_dest_V_1_state_cmp_full;
reg   [1:0] state_3;
reg    m_axis_mem_write_data_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    rx_pkgShiftTypeFifo_s_8_blk_n;
reg    rx_aethSift2mergerFi_3_blk_n;
reg    rx_aethSift2mergerFi_5_blk_n;
reg    rx_aethSift2mergerFi_6_blk_n;
reg    rx_rethSift2mergerFi_8_blk_n;
reg    rx_rethSift2mergerFi_6_blk_n;
reg    rx_rethSift2mergerFi_7_blk_n;
reg    rx_rethSift2mergerFi_4_blk_n;
reg    rx_exhNoShiftFifo_V_1_blk_n;
reg    rx_exhNoShiftFifo_V_4_blk_n;
reg    rx_exhNoShiftFifo_V_s_blk_n;
reg    rx_exhNoShiftFifo_V_3_blk_n;
reg   [511:0] tmp_data_V_30_reg_289;
reg   [63:0] tmp_keep_V_29_reg_294;
wire   [0:0] tmp_last_V_25_fu_205_p1;
reg   [0:0] tmp_last_V_25_reg_299;
reg   [0:0] tmp_dest_V_2_reg_304;
reg   [511:0] tmp_data_V_29_reg_313;
reg   [63:0] tmp_keep_V_28_reg_318;
wire   [0:0] tmp_last_V_24_fu_221_p1;
reg   [0:0] tmp_last_V_24_reg_323;
reg   [0:0] tmp_dest_V_reg_328;
reg   [511:0] tmp_data_V_reg_337;
reg   [63:0] tmp_keep_V_reg_342;
wire   [0:0] tmp_last_V_fu_237_p1;
reg   [0:0] tmp_last_V_reg_347;
reg    ap_block_pp0_stage0_subdone;
wire   [1:0] select_ln2346_1_fu_267_p3;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln2346_fu_241_p2;
wire   [0:0] icmp_ln2350_fu_247_p2;
wire   [0:0] or_ln2346_fu_261_p2;
wire   [1:0] select_ln2346_fu_253_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_591;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 m_axis_mem_write_data_V_data_V_1_state = 2'd0;
#0 m_axis_mem_write_data_V_keep_V_1_state = 2'd0;
#0 m_axis_mem_write_data_V_last_V_1_state = 2'd0;
#0 m_axis_mem_write_data_V_dest_V_1_state = 2'd0;
#0 m_axis_mem_write_data_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_mem_write_data_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_mem_write_data_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_mem_write_data_V_keep_V_1_sel_wr = 1'b0;
#0 m_axis_mem_write_data_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_mem_write_data_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_mem_write_data_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_mem_write_data_V_dest_V_1_sel_wr = 1'b0;
#0 state_3 = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_data_V_1_vld_out == 1'b1) & (m_axis_mem_write_data_V_data_V_1_ack_out == 1'b1))) begin
            m_axis_mem_write_data_V_data_V_1_sel_rd <= ~m_axis_mem_write_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_data_V_1_vld_in == 1'b1) & (m_axis_mem_write_data_V_data_V_1_ack_in == 1'b1))) begin
            m_axis_mem_write_data_V_data_V_1_sel_wr <= ~m_axis_mem_write_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_mem_write_data_V_data_V_1_state == 2'd3) & (m_axis_mem_write_data_V_data_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_data_V_1_ack_out == 1'b1)) | ((m_axis_mem_write_data_V_data_V_1_state == 2'd2) & (m_axis_mem_write_data_V_data_V_1_vld_in == 1'b0)))) begin
            m_axis_mem_write_data_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_data_V_1_state == 2'd1)) | ((m_axis_mem_write_data_V_data_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_data_V_1_state <= 2'd1;
        end else if ((((m_axis_mem_write_data_V_data_V_1_ack_out == 1'b1) & (m_axis_mem_write_data_V_data_V_1_state == 2'd1)) | (~((m_axis_mem_write_data_V_data_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_data_V_1_vld_in == 1'b1)) & (m_axis_mem_write_data_V_data_V_1_state == 2'd3)) | ((m_axis_mem_write_data_V_data_V_1_state == 2'd2) & (m_axis_mem_write_data_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_mem_write_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_dest_V_1_vld_out == 1'b1) & (m_axis_mem_write_data_V_dest_V_1_ack_out == 1'b1))) begin
            m_axis_mem_write_data_V_dest_V_1_sel_rd <= ~m_axis_mem_write_data_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_dest_V_1_ack_in == 1'b1) & (m_axis_mem_write_data_V_dest_V_1_vld_in == 1'b1))) begin
            m_axis_mem_write_data_V_dest_V_1_sel_wr <= ~m_axis_mem_write_data_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_mem_write_data_V_dest_V_1_state == 2'd3) & (m_axis_mem_write_data_V_dest_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_dest_V_1_ack_out == 1'b1)) | ((m_axis_mem_write_data_V_dest_V_1_state == 2'd2) & (m_axis_mem_write_data_V_dest_V_1_vld_in == 1'b0)))) begin
            m_axis_mem_write_data_V_dest_V_1_state <= 2'd2;
        end else if ((((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_dest_V_1_state == 2'd1)) | ((m_axis_mem_write_data_V_dest_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_dest_V_1_state <= 2'd1;
        end else if ((((m_axis_mem_write_data_V_dest_V_1_ack_out == 1'b1) & (m_axis_mem_write_data_V_dest_V_1_state == 2'd1)) | (~((m_axis_mem_write_data_V_dest_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_dest_V_1_ack_out == 1'b1)) & ~((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_dest_V_1_vld_in == 1'b1)) & (m_axis_mem_write_data_V_dest_V_1_state == 2'd3)) | ((m_axis_mem_write_data_V_dest_V_1_state == 2'd2) & (m_axis_mem_write_data_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_mem_write_data_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_keep_V_1_vld_out == 1'b1) & (m_axis_mem_write_data_V_keep_V_1_ack_out == 1'b1))) begin
            m_axis_mem_write_data_V_keep_V_1_sel_rd <= ~m_axis_mem_write_data_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_keep_V_1_ack_in == 1'b1) & (m_axis_mem_write_data_V_keep_V_1_vld_in == 1'b1))) begin
            m_axis_mem_write_data_V_keep_V_1_sel_wr <= ~m_axis_mem_write_data_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_mem_write_data_V_keep_V_1_state == 2'd3) & (m_axis_mem_write_data_V_keep_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_mem_write_data_V_keep_V_1_state == 2'd2) & (m_axis_mem_write_data_V_keep_V_1_vld_in == 1'b0)))) begin
            m_axis_mem_write_data_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_keep_V_1_state == 2'd1)) | ((m_axis_mem_write_data_V_keep_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_keep_V_1_state <= 2'd1;
        end else if ((((m_axis_mem_write_data_V_keep_V_1_ack_out == 1'b1) & (m_axis_mem_write_data_V_keep_V_1_state == 2'd1)) | (~((m_axis_mem_write_data_V_keep_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_keep_V_1_vld_in == 1'b1)) & (m_axis_mem_write_data_V_keep_V_1_state == 2'd3)) | ((m_axis_mem_write_data_V_keep_V_1_state == 2'd2) & (m_axis_mem_write_data_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_mem_write_data_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_last_V_1_vld_out == 1'b1) & (m_axis_mem_write_data_V_last_V_1_ack_out == 1'b1))) begin
            m_axis_mem_write_data_V_last_V_1_sel_rd <= ~m_axis_mem_write_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_mem_write_data_V_last_V_1_ack_in == 1'b1) & (m_axis_mem_write_data_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_mem_write_data_V_last_V_1_sel_wr <= ~m_axis_mem_write_data_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_mem_write_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_mem_write_data_V_last_V_1_state == 2'd3) & (m_axis_mem_write_data_V_last_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_last_V_1_ack_out == 1'b1)) | ((m_axis_mem_write_data_V_last_V_1_state == 2'd2) & (m_axis_mem_write_data_V_last_V_1_vld_in == 1'b0)))) begin
            m_axis_mem_write_data_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_last_V_1_state == 2'd1)) | ((m_axis_mem_write_data_V_last_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_last_V_1_state <= 2'd1;
        end else if ((((m_axis_mem_write_data_V_last_V_1_ack_out == 1'b1) & (m_axis_mem_write_data_V_last_V_1_state == 2'd1)) | (~((m_axis_mem_write_data_V_last_V_1_vld_in == 1'b0) & (m_axis_mem_write_data_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_mem_write_data_TREADY == 1'b0) & (m_axis_mem_write_data_V_last_V_1_vld_in == 1'b1)) & (m_axis_mem_write_data_V_last_V_1_state == 2'd3)) | ((m_axis_mem_write_data_V_last_V_1_state == 2'd2) & (m_axis_mem_write_data_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_mem_write_data_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_mem_write_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_156_p3 == 1'd1) & (state_3 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_3 <= select_ln2346_1_fu_267_p3;
    end else if ((((tmp_60_nbreadreq_fu_108_p6 == 1'd1) & (tmp_last_V_24_fu_221_p1 == 1'd1) & (state_3 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_last_V_25_fu_205_p1 == 1'd1) & (tmp_61_nbreadreq_fu_82_p6 == 1'd1) & (state_3 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_last_V_fu_237_p1 == 1'd1) & (tmp_59_nbreadreq_fu_134_p5 == 1'd1) & (state_3 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        state_3 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_data_V_1_load_A == 1'b1)) begin
        m_axis_mem_write_data_V_data_V_1_payload_A <= m_axis_mem_write_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_data_V_1_load_B == 1'b1)) begin
        m_axis_mem_write_data_V_data_V_1_payload_B <= m_axis_mem_write_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_dest_V_1_load_A == 1'b1)) begin
        m_axis_mem_write_data_V_dest_V_1_payload_A <= m_axis_mem_write_data_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_dest_V_1_load_B == 1'b1)) begin
        m_axis_mem_write_data_V_dest_V_1_payload_B <= m_axis_mem_write_data_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_keep_V_1_load_A == 1'b1)) begin
        m_axis_mem_write_data_V_keep_V_1_payload_A <= m_axis_mem_write_data_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_keep_V_1_load_B == 1'b1)) begin
        m_axis_mem_write_data_V_keep_V_1_payload_B <= m_axis_mem_write_data_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_last_V_1_load_A == 1'b1)) begin
        m_axis_mem_write_data_V_last_V_1_payload_A <= m_axis_mem_write_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_mem_write_data_V_last_V_1_load_B == 1'b1)) begin
        m_axis_mem_write_data_V_last_V_1_payload_B <= m_axis_mem_write_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_3_load_reg_281 <= state_3;
        state_3_load_reg_281_pp0_iter1_reg <= state_3_load_reg_281;
        tmp_59_reg_333_pp0_iter1_reg <= tmp_59_reg_333;
        tmp_60_reg_309_pp0_iter1_reg <= tmp_60_reg_309;
        tmp_61_reg_285_pp0_iter1_reg <= tmp_61_reg_285;
    end
end

always @ (posedge ap_clk) begin
    if (((state_3 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_59_reg_333 <= tmp_59_nbreadreq_fu_134_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((state_3 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_60_reg_309 <= tmp_60_nbreadreq_fu_108_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((state_3 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_61_reg_285 <= tmp_61_nbreadreq_fu_82_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_60_nbreadreq_fu_108_p6 == 1'd1) & (state_3 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_29_reg_313 <= rx_rethSift2mergerFi_8_dout;
        tmp_dest_V_reg_328 <= rx_rethSift2mergerFi_4_dout;
        tmp_keep_V_28_reg_318 <= rx_rethSift2mergerFi_6_dout;
        tmp_last_V_24_reg_323 <= rx_rethSift2mergerFi_7_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_61_nbreadreq_fu_82_p6 == 1'd1) & (state_3 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_30_reg_289 <= rx_exhNoShiftFifo_V_1_dout;
        tmp_dest_V_2_reg_304 <= rx_exhNoShiftFifo_V_3_dout;
        tmp_keep_V_29_reg_294 <= rx_exhNoShiftFifo_V_4_dout;
        tmp_last_V_25_reg_299 <= rx_exhNoShiftFifo_V_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_59_nbreadreq_fu_134_p5 == 1'd1) & (state_3 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_reg_337 <= rx_aethSift2mergerFi_3_dout;
        tmp_keep_V_reg_342 <= rx_aethSift2mergerFi_5_dout;
        tmp_last_V_reg_347 <= rx_aethSift2mergerFi_6_dout;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op66_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op62_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op58_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_write_state2 == 1'b1)))) begin
        m_axis_mem_write_data_TDATA_blk_n = m_axis_mem_write_data_V_data_V_1_state[1'd1];
    end else begin
        m_axis_mem_write_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_591)) begin
        if ((ap_predicate_op42_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_data_V_1_data_in = tmp_data_V_reg_337;
        end else if ((ap_predicate_op40_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_data_V_1_data_in = tmp_data_V_29_reg_313;
        end else if ((ap_predicate_op38_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_data_V_1_data_in = tmp_data_V_30_reg_289;
        end else begin
            m_axis_mem_write_data_V_data_V_1_data_in = 'bx;
        end
    end else begin
        m_axis_mem_write_data_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((m_axis_mem_write_data_V_data_V_1_sel == 1'b1)) begin
        m_axis_mem_write_data_V_data_V_1_data_out = m_axis_mem_write_data_V_data_V_1_payload_B;
    end else begin
        m_axis_mem_write_data_V_data_V_1_data_out = m_axis_mem_write_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_write_state2 == 1'b1)))) begin
        m_axis_mem_write_data_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_mem_write_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_591)) begin
        if ((ap_predicate_op42_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_dest_V_1_data_in = 1'd0;
        end else if ((ap_predicate_op40_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_dest_V_1_data_in = tmp_dest_V_reg_328;
        end else if ((ap_predicate_op38_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_dest_V_1_data_in = tmp_dest_V_2_reg_304;
        end else begin
            m_axis_mem_write_data_V_dest_V_1_data_in = 'bx;
        end
    end else begin
        m_axis_mem_write_data_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((m_axis_mem_write_data_V_dest_V_1_sel == 1'b1)) begin
        m_axis_mem_write_data_V_dest_V_1_data_out = m_axis_mem_write_data_V_dest_V_1_payload_B;
    end else begin
        m_axis_mem_write_data_V_dest_V_1_data_out = m_axis_mem_write_data_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_write_state2 == 1'b1)))) begin
        m_axis_mem_write_data_V_dest_V_1_vld_in = 1'b1;
    end else begin
        m_axis_mem_write_data_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_591)) begin
        if ((ap_predicate_op42_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_keep_V_1_data_in = tmp_keep_V_reg_342;
        end else if ((ap_predicate_op40_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_keep_V_1_data_in = tmp_keep_V_28_reg_318;
        end else if ((ap_predicate_op38_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_keep_V_1_data_in = tmp_keep_V_29_reg_294;
        end else begin
            m_axis_mem_write_data_V_keep_V_1_data_in = 'bx;
        end
    end else begin
        m_axis_mem_write_data_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((m_axis_mem_write_data_V_keep_V_1_sel == 1'b1)) begin
        m_axis_mem_write_data_V_keep_V_1_data_out = m_axis_mem_write_data_V_keep_V_1_payload_B;
    end else begin
        m_axis_mem_write_data_V_keep_V_1_data_out = m_axis_mem_write_data_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_write_state2 == 1'b1)))) begin
        m_axis_mem_write_data_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_mem_write_data_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_591)) begin
        if ((ap_predicate_op42_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_last_V_1_data_in = tmp_last_V_reg_347;
        end else if ((ap_predicate_op40_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_last_V_1_data_in = tmp_last_V_24_reg_323;
        end else if ((ap_predicate_op38_write_state2 == 1'b1)) begin
            m_axis_mem_write_data_V_last_V_1_data_in = tmp_last_V_25_reg_299;
        end else begin
            m_axis_mem_write_data_V_last_V_1_data_in = 'bx;
        end
    end else begin
        m_axis_mem_write_data_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((m_axis_mem_write_data_V_last_V_1_sel == 1'b1)) begin
        m_axis_mem_write_data_V_last_V_1_data_out = m_axis_mem_write_data_V_last_V_1_payload_B;
    end else begin
        m_axis_mem_write_data_V_last_V_1_data_out = m_axis_mem_write_data_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op42_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_write_state2 == 1'b1)))) begin
        m_axis_mem_write_data_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_mem_write_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_read_state1 == 1'b1))) begin
        rx_aethSift2mergerFi_3_blk_n = rx_aethSift2mergerFi_3_empty_n;
    end else begin
        rx_aethSift2mergerFi_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_read_state1 == 1'b1))) begin
        rx_aethSift2mergerFi_3_read = 1'b1;
    end else begin
        rx_aethSift2mergerFi_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_read_state1 == 1'b1))) begin
        rx_aethSift2mergerFi_5_blk_n = rx_aethSift2mergerFi_5_empty_n;
    end else begin
        rx_aethSift2mergerFi_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_read_state1 == 1'b1))) begin
        rx_aethSift2mergerFi_5_read = 1'b1;
    end else begin
        rx_aethSift2mergerFi_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_read_state1 == 1'b1))) begin
        rx_aethSift2mergerFi_6_blk_n = rx_aethSift2mergerFi_6_empty_n;
    end else begin
        rx_aethSift2mergerFi_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_read_state1 == 1'b1))) begin
        rx_aethSift2mergerFi_6_read = 1'b1;
    end else begin
        rx_aethSift2mergerFi_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_1_blk_n = rx_exhNoShiftFifo_V_1_empty_n;
    end else begin
        rx_exhNoShiftFifo_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_1_read = 1'b1;
    end else begin
        rx_exhNoShiftFifo_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_3_blk_n = rx_exhNoShiftFifo_V_3_empty_n;
    end else begin
        rx_exhNoShiftFifo_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_3_read = 1'b1;
    end else begin
        rx_exhNoShiftFifo_V_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_4_blk_n = rx_exhNoShiftFifo_V_4_empty_n;
    end else begin
        rx_exhNoShiftFifo_V_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_4_read = 1'b1;
    end else begin
        rx_exhNoShiftFifo_V_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_s_blk_n = rx_exhNoShiftFifo_V_s_empty_n;
    end else begin
        rx_exhNoShiftFifo_V_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rx_exhNoShiftFifo_V_s_read = 1'b1;
    end else begin
        rx_exhNoShiftFifo_V_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op31_read_state1 == 1'b1))) begin
        rx_pkgShiftTypeFifo_s_8_blk_n = rx_pkgShiftTypeFifo_s_8_empty_n;
    end else begin
        rx_pkgShiftTypeFifo_s_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op31_read_state1 == 1'b1))) begin
        rx_pkgShiftTypeFifo_s_8_read = 1'b1;
    end else begin
        rx_pkgShiftTypeFifo_s_8_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_4_blk_n = rx_rethSift2mergerFi_4_empty_n;
    end else begin
        rx_rethSift2mergerFi_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_4_read = 1'b1;
    end else begin
        rx_rethSift2mergerFi_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_6_blk_n = rx_rethSift2mergerFi_6_empty_n;
    end else begin
        rx_rethSift2mergerFi_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_6_read = 1'b1;
    end else begin
        rx_rethSift2mergerFi_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_7_blk_n = rx_rethSift2mergerFi_7_empty_n;
    end else begin
        rx_rethSift2mergerFi_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_7_read = 1'b1;
    end else begin
        rx_rethSift2mergerFi_7_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_8_blk_n = rx_rethSift2mergerFi_8_empty_n;
    end else begin
        rx_rethSift2mergerFi_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1))) begin
        rx_rethSift2mergerFi_8_read = 1'b1;
    end else begin
        rx_rethSift2mergerFi_8_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((rx_pkgShiftTypeFifo_s_8_empty_n == 1'b0) & (ap_predicate_op31_read_state1 == 1'b1)) | ((io_acc_block_signal_op24 == 1'b0) & (ap_predicate_op24_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((m_axis_mem_write_data_V_dest_V_1_state == 2'd1) | (m_axis_mem_write_data_V_last_V_1_state == 2'd1) | (m_axis_mem_write_data_V_keep_V_1_state == 2'd1) | (m_axis_mem_write_data_V_data_V_1_state == 2'd1) | ((m_axis_mem_write_data_V_dest_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_last_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_keep_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_data_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((rx_pkgShiftTypeFifo_s_8_empty_n == 1'b0) & (ap_predicate_op31_read_state1 == 1'b1)) | ((io_acc_block_signal_op24 == 1'b0) & (ap_predicate_op24_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (m_axis_mem_write_data_V_dest_V_1_state == 2'd1) | (m_axis_mem_write_data_V_last_V_1_state == 2'd1) | (m_axis_mem_write_data_V_keep_V_1_state == 2'd1) | (m_axis_mem_write_data_V_data_V_1_state == 2'd1) | ((m_axis_mem_write_data_V_dest_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_last_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_keep_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_data_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((rx_pkgShiftTypeFifo_s_8_empty_n == 1'b0) & (ap_predicate_op31_read_state1 == 1'b1)) | ((io_acc_block_signal_op24 == 1'b0) & (ap_predicate_op24_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (m_axis_mem_write_data_V_dest_V_1_state == 2'd1) | (m_axis_mem_write_data_V_last_V_1_state == 2'd1) | (m_axis_mem_write_data_V_keep_V_1_state == 2'd1) | (m_axis_mem_write_data_V_data_V_1_state == 2'd1) | ((m_axis_mem_write_data_V_dest_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_last_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_keep_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_data_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)) | ((rx_pkgShiftTypeFifo_s_8_empty_n == 1'b0) & (ap_predicate_op31_read_state1 == 1'b1)) | ((io_acc_block_signal_op24 == 1'b0) & (ap_predicate_op24_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((m_axis_mem_write_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op42_write_state2 == 1'b1)) | ((m_axis_mem_write_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op40_write_state2 == 1'b1)) | ((m_axis_mem_write_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op38_write_state2 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((m_axis_mem_write_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op66_write_state3 == 1'b1)) | ((m_axis_mem_write_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op62_write_state3 == 1'b1)) | ((m_axis_mem_write_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op58_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((m_axis_mem_write_data_V_dest_V_1_state == 2'd1) | (m_axis_mem_write_data_V_last_V_1_state == 2'd1) | (m_axis_mem_write_data_V_keep_V_1_state == 2'd1) | (m_axis_mem_write_data_V_data_V_1_state == 2'd1) | ((m_axis_mem_write_data_V_dest_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_last_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_keep_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)) | ((m_axis_mem_write_data_V_data_V_1_state == 2'd3) & (m_axis_mem_write_data_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_591 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op16_read_state1 = ((tmp_60_nbreadreq_fu_108_p6 == 1'd1) & (state_3 == 2'd2));
end

always @ (*) begin
    ap_predicate_op24_read_state1 = ((tmp_59_nbreadreq_fu_134_p5 == 1'd1) & (state_3 == 2'd1));
end

always @ (*) begin
    ap_predicate_op31_read_state1 = ((tmp_nbreadreq_fu_156_p3 == 1'd1) & (state_3 == 2'd0));
end

always @ (*) begin
    ap_predicate_op38_write_state2 = ((tmp_61_reg_285 == 1'd1) & (state_3_load_reg_281 == 2'd3));
end

always @ (*) begin
    ap_predicate_op40_write_state2 = ((state_3_load_reg_281 == 2'd2) & (tmp_60_reg_309 == 1'd1));
end

always @ (*) begin
    ap_predicate_op42_write_state2 = ((tmp_59_reg_333 == 1'd1) & (state_3_load_reg_281 == 2'd1));
end

always @ (*) begin
    ap_predicate_op58_write_state3 = ((tmp_61_reg_285_pp0_iter1_reg == 1'd1) & (state_3_load_reg_281_pp0_iter1_reg == 2'd3));
end

always @ (*) begin
    ap_predicate_op62_write_state3 = ((state_3_load_reg_281_pp0_iter1_reg == 2'd2) & (tmp_60_reg_309_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op66_write_state3 = ((tmp_59_reg_333_pp0_iter1_reg == 1'd1) & (state_3_load_reg_281_pp0_iter1_reg == 2'd1));
end

always @ (*) begin
    ap_predicate_op8_read_state1 = ((tmp_61_nbreadreq_fu_82_p6 == 1'd1) & (state_3 == 2'd3));
end

assign icmp_ln2346_fu_241_p2 = ((rx_pkgShiftTypeFifo_s_8_dout == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln2350_fu_247_p2 = ((rx_pkgShiftTypeFifo_s_8_dout == 2'd1) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op16 = (rx_rethSift2mergerFi_8_empty_n & rx_rethSift2mergerFi_7_empty_n & rx_rethSift2mergerFi_6_empty_n & rx_rethSift2mergerFi_4_empty_n);

assign io_acc_block_signal_op24 = (rx_aethSift2mergerFi_6_empty_n & rx_aethSift2mergerFi_5_empty_n & rx_aethSift2mergerFi_3_empty_n);

assign io_acc_block_signal_op8 = (rx_exhNoShiftFifo_V_s_empty_n & rx_exhNoShiftFifo_V_4_empty_n & rx_exhNoShiftFifo_V_3_empty_n & rx_exhNoShiftFifo_V_1_empty_n);

assign m_axis_mem_write_data_TDATA = m_axis_mem_write_data_V_data_V_1_data_out;

assign m_axis_mem_write_data_TDEST = m_axis_mem_write_data_V_dest_V_1_data_out;

assign m_axis_mem_write_data_TKEEP = m_axis_mem_write_data_V_keep_V_1_data_out;

assign m_axis_mem_write_data_TLAST = m_axis_mem_write_data_V_last_V_1_data_out;

assign m_axis_mem_write_data_TVALID = m_axis_mem_write_data_V_dest_V_1_state[1'd0];

assign m_axis_mem_write_data_V_data_V_1_ack_in = m_axis_mem_write_data_V_data_V_1_state[1'd1];

assign m_axis_mem_write_data_V_data_V_1_ack_out = m_axis_mem_write_data_TREADY;

assign m_axis_mem_write_data_V_data_V_1_load_A = (m_axis_mem_write_data_V_data_V_1_state_cmp_full & ~m_axis_mem_write_data_V_data_V_1_sel_wr);

assign m_axis_mem_write_data_V_data_V_1_load_B = (m_axis_mem_write_data_V_data_V_1_state_cmp_full & m_axis_mem_write_data_V_data_V_1_sel_wr);

assign m_axis_mem_write_data_V_data_V_1_sel = m_axis_mem_write_data_V_data_V_1_sel_rd;

assign m_axis_mem_write_data_V_data_V_1_state_cmp_full = ((m_axis_mem_write_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_mem_write_data_V_data_V_1_vld_out = m_axis_mem_write_data_V_data_V_1_state[1'd0];

assign m_axis_mem_write_data_V_dest_V_1_ack_in = m_axis_mem_write_data_V_dest_V_1_state[1'd1];

assign m_axis_mem_write_data_V_dest_V_1_ack_out = m_axis_mem_write_data_TREADY;

assign m_axis_mem_write_data_V_dest_V_1_load_A = (m_axis_mem_write_data_V_dest_V_1_state_cmp_full & ~m_axis_mem_write_data_V_dest_V_1_sel_wr);

assign m_axis_mem_write_data_V_dest_V_1_load_B = (m_axis_mem_write_data_V_dest_V_1_state_cmp_full & m_axis_mem_write_data_V_dest_V_1_sel_wr);

assign m_axis_mem_write_data_V_dest_V_1_sel = m_axis_mem_write_data_V_dest_V_1_sel_rd;

assign m_axis_mem_write_data_V_dest_V_1_state_cmp_full = ((m_axis_mem_write_data_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_mem_write_data_V_dest_V_1_vld_out = m_axis_mem_write_data_V_dest_V_1_state[1'd0];

assign m_axis_mem_write_data_V_keep_V_1_ack_in = m_axis_mem_write_data_V_keep_V_1_state[1'd1];

assign m_axis_mem_write_data_V_keep_V_1_ack_out = m_axis_mem_write_data_TREADY;

assign m_axis_mem_write_data_V_keep_V_1_load_A = (m_axis_mem_write_data_V_keep_V_1_state_cmp_full & ~m_axis_mem_write_data_V_keep_V_1_sel_wr);

assign m_axis_mem_write_data_V_keep_V_1_load_B = (m_axis_mem_write_data_V_keep_V_1_state_cmp_full & m_axis_mem_write_data_V_keep_V_1_sel_wr);

assign m_axis_mem_write_data_V_keep_V_1_sel = m_axis_mem_write_data_V_keep_V_1_sel_rd;

assign m_axis_mem_write_data_V_keep_V_1_state_cmp_full = ((m_axis_mem_write_data_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_mem_write_data_V_keep_V_1_vld_out = m_axis_mem_write_data_V_keep_V_1_state[1'd0];

assign m_axis_mem_write_data_V_last_V_1_ack_in = m_axis_mem_write_data_V_last_V_1_state[1'd1];

assign m_axis_mem_write_data_V_last_V_1_ack_out = m_axis_mem_write_data_TREADY;

assign m_axis_mem_write_data_V_last_V_1_load_A = (m_axis_mem_write_data_V_last_V_1_state_cmp_full & ~m_axis_mem_write_data_V_last_V_1_sel_wr);

assign m_axis_mem_write_data_V_last_V_1_load_B = (m_axis_mem_write_data_V_last_V_1_state_cmp_full & m_axis_mem_write_data_V_last_V_1_sel_wr);

assign m_axis_mem_write_data_V_last_V_1_sel = m_axis_mem_write_data_V_last_V_1_sel_rd;

assign m_axis_mem_write_data_V_last_V_1_state_cmp_full = ((m_axis_mem_write_data_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_mem_write_data_V_last_V_1_vld_out = m_axis_mem_write_data_V_last_V_1_state[1'd0];

assign or_ln2346_fu_261_p2 = (icmp_ln2350_fu_247_p2 | icmp_ln2346_fu_241_p2);

assign select_ln2346_1_fu_267_p3 = ((or_ln2346_fu_261_p2[0:0] === 1'b1) ? select_ln2346_fu_253_p3 : 2'd3);

assign select_ln2346_fu_253_p3 = ((icmp_ln2346_fu_241_p2[0:0] === 1'b1) ? 2'd1 : 2'd2);

assign tmp_59_nbreadreq_fu_134_p5 = (rx_aethSift2mergerFi_6_empty_n & rx_aethSift2mergerFi_5_empty_n & rx_aethSift2mergerFi_3_empty_n);

assign tmp_60_nbreadreq_fu_108_p6 = (rx_rethSift2mergerFi_8_empty_n & rx_rethSift2mergerFi_7_empty_n & rx_rethSift2mergerFi_6_empty_n & rx_rethSift2mergerFi_4_empty_n);

assign tmp_61_nbreadreq_fu_82_p6 = (rx_exhNoShiftFifo_V_s_empty_n & rx_exhNoShiftFifo_V_4_empty_n & rx_exhNoShiftFifo_V_3_empty_n & rx_exhNoShiftFifo_V_1_empty_n);

assign tmp_last_V_24_fu_221_p1 = rx_rethSift2mergerFi_7_dout;

assign tmp_last_V_25_fu_205_p1 = rx_exhNoShiftFifo_V_s_dout;

assign tmp_last_V_fu_237_p1 = rx_aethSift2mergerFi_6_dout;

assign tmp_nbreadreq_fu_156_p3 = rx_pkgShiftTypeFifo_s_8_empty_n;

endmodule //merge_rx_pkgs_512_s
